### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder?alt=Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder&text=AcquireTokenInteractiveParameterBuilder" data-throw-if-not-resolved="True"/>
    description: The builder to chain the .With methods
  parameters:
  - namesWithMoniker:
    - value: account
    description: Account to use for the interactive token acquisition. See <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.IAccount"></xref> for ways to get an account
    type: <xref href="Microsoft.Identity.Client.IAccount?alt=Microsoft.Identity.Client.IAccount&text=IAccount" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithAccount(Microsoft.Identity.Client.IAccount)
  commentId: M:Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithAccount(Microsoft.Identity.Client.IAccount)
  name: WithAccount(IAccount)
  fullName: Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithAccount(IAccount)
  nameWithType: AcquireTokenInteractiveParameterBuilder.WithAccount(IAccount)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder WithAccount (Microsoft.Identity.Client.IAccount account);
  - lang: fsharp
    values:
    - value: 'member this.WithAccount : Microsoft.Identity.Client.IAccount -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder'
  - lang: vb
    values:
    - value: Public Function WithAccount (account As IAccount) As AcquireTokenInteractiveParameterBuilder
  monikers:
  - msal-dotnet-latest
  summary: >-
    Sets the account for which the token will be retrieved. This method is mutually exclusive

    with <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithLoginHint(System.String)"></xref>. If both are used, an exception will be thrown
  metadata: {}
uid: Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithAccount*
commentId: Overload:Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithAccount
namespace: Microsoft.Identity.Client
name: WithAccount
fullName: Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithAccount
nameWithType: AcquireTokenInteractiveParameterBuilder.WithAccount
assembliesWithMoniker:
- value: Microsoft.Identity.Client.dll
packagesWithMoniker:
- value: Microsoft.Identity.Client v4.49.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithAccount
  api_location:
  - Microsoft.Identity.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithAccount
  - Microsoft::Identity::Client::AcquireTokenInteractiveParameterBuilder::WithAccount
  - WithAccount
  - AcquireTokenInteractiveParameterBuilder.WithAccount
  - AcquireTokenInteractiveParameterBuilder::WithAccount
  helpviewer_keywords:
  - AcquireTokenInteractiveParameterBuilder.WithAccount method [.NET]
  - WithAccount method [.NET], class AcquireTokenInteractiveParameterBuilder
  - AcquireTokenInteractiveParameterBuilder.WithAccount(IAccount) method [.NET]
  - WithAccount(IAccount) method [.NET], class AcquireTokenInteractiveParameterBuilder
  monikers:
  - msal-dotnet-latest
