### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder?alt=Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder&text=AcquireTokenOnBehalfOfParameterBuilder" data-throw-if-not-resolved="True"/>
    description: A builder enabling you to add optional parameters before executing the token request
  parameters:
  - namesWithMoniker:
    - value: scopes
    description: Scopes requested to access a protected API
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: userAssertion
    description: >-
      Instance of <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.UserAssertion"></xref> containing credential information about
                  the user on behalf of whom to get a token.
    type: <xref href="Microsoft.Identity.Client.UserAssertion?alt=Microsoft.Identity.Client.UserAssertion&text=UserAssertion" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOf(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.UserAssertion)
  commentId: M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOf(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.UserAssertion)
  name: AcquireTokenOnBehalfOf(IEnumerable<String>, UserAssertion)
  fullName: Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOf(IEnumerable<String>, UserAssertion)
  nameWithType: IConfidentialClientApplication.AcquireTokenOnBehalfOf(IEnumerable<String>, UserAssertion)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder AcquireTokenOnBehalfOf (System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.UserAssertion userAssertion);
  - lang: fsharp
    values:
    - value: 'abstract member AcquireTokenOnBehalfOf : seq<string> * Microsoft.Identity.Client.UserAssertion -> Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder'
  - lang: vb
    values:
    - value: Public Function AcquireTokenOnBehalfOf (scopes As IEnumerable(Of String), userAssertion As UserAssertion) As AcquireTokenOnBehalfOfParameterBuilder
  monikers:
  - msal-dotnet-latest
  summary: >-
    [V3 API] Acquires an access token for this application (usually a web API) from the authority configured in the application,

    in order to access another downstream protected web API on behalf of a user using the OAuth 2.0 On-Behalf-Of flow.

    See https://aka.ms/msal-net-on-behalf-of.

    This confidential client application was itself called with a token which will be provided in the

    <code data-dev-comment-type="paramref">userAssertion</code> parameter.
  remarks: '<p>You can also chain the following optional parameters: <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})"></xref></p>'
  metadata: {}
uid: Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOf*
commentId: Overload:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOf
namespace: Microsoft.Identity.Client
name: AcquireTokenOnBehalfOf
fullName: Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOf
nameWithType: IConfidentialClientApplication.AcquireTokenOnBehalfOf
assembliesWithMoniker:
- value: Microsoft.Identity.Client.dll
packagesWithMoniker:
- value: Microsoft.Identity.Client v4.49.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOf
  api_location:
  - Microsoft.Identity.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOf
  - Microsoft::Identity::Client::IConfidentialClientApplication::AcquireTokenOnBehalfOf
  - AcquireTokenOnBehalfOf
  - IConfidentialClientApplication.AcquireTokenOnBehalfOf
  - IConfidentialClientApplication::AcquireTokenOnBehalfOf
  helpviewer_keywords:
  - IConfidentialClientApplication.AcquireTokenOnBehalfOf method [.NET]
  - AcquireTokenOnBehalfOf method [.NET], interface IConfidentialClientApplication
  - IConfidentialClientApplication.AcquireTokenOnBehalfOf(IEnumerable<String>, UserAssertion) method [.NET]
  - AcquireTokenOnBehalfOf(IEnumerable<String>, UserAssertion) method [.NET], interface IConfidentialClientApplication
  monikers:
  - msal-dotnet-latest
