### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.Identity.Client.AuthenticationResult?alt=Microsoft.Identity.Client.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="True"/>&gt;
    description: Authentication result containing the token of the user for the requested scopes
  parameters:
  - namesWithMoniker:
    - value: scopes
    description: >-
      scopes requested to access a protected API. For this flow (client credentials), the scopes
                  should be of the form "{ResourceIdUri/.default}" for instance <code data-dev-comment-type="c">https://management.azure.net/.default</code> or, for Microsoft
                  Graph, <code data-dev-comment-type="c">https://graph.microsoft.com/.default</code> as the requested scopes are really defined statically at application registration
                  in the portal, and cannot be overridden in the application. See also
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  implementsWithMoniker:
  - value: <xref href="Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenForClientAsync(System.Collections.Generic.IEnumerable{System.String})?alt=Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenForClientAsync(System.Collections.Generic.IEnumerable{System.String})&text=AcquireTokenForClientAsync(IEnumerable%3CString%3E)" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync(System.Collections.Generic.IEnumerable{System.String})
  name: AcquireTokenForClientAsync(IEnumerable<String>)
  fullName: Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync(IEnumerable<String>)
  nameWithType: ConfidentialClientApplication.AcquireTokenForClientAsync(IEnumerable<String>)
  attributesWithMoniker:
  - value: System.ObsoleteAttribute
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: >-
        [System.Obsolete("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)]

        public System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult> AcquireTokenForClientAsync (System.Collections.Generic.IEnumerable<string> scopes);
  - lang: fsharp
    values:
    - value: >-
        [<System.Obsolete("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)>]

        abstract member AcquireTokenForClientAsync : seq<string> -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>

        override this.AcquireTokenForClientAsync : seq<string> -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>
  - lang: vb
    values:
    - value: Public Function AcquireTokenForClientAsync (scopes As IEnumerable(Of String)) As Task(Of AuthenticationResult)
  monikers:
  - msal-dotnet-latest
  obsoleteMessagesWithMoniker:
  - value: 'Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes. '
  summary: >-
    [V3 API] Acquires a token from the authority configured in the app, for the confidential client itself (in the name of no user)

    using the client credentials flow. (See https://aka.ms/msal-net-client-credentials)
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.Identity.Client.AuthenticationResult?alt=Microsoft.Identity.Client.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="True"/>&gt;
    description: Authentication result containing token of the user for the requested scopes
  parameters:
  - namesWithMoniker:
    - value: scopes
    description: >-
      Scopes requested to access a protected API. For this flow (client credentials), the scopes
                  should be of the form "{ResourceIdUri/.default}" for instance <code data-dev-comment-type="c">https://management.azure.net/.default</code> or, for Microsoft
                  Graph, <code data-dev-comment-type="c">https://graph.microsoft.com/.default</code> as the requested scopes are really defined statically at application registration
                  in the portal, and cannot be overridden in the application
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: forceRefresh
    description: >-
      If <code data-dev-comment-type="c">true</code>, API will ignore the access token in the cache and attempt to acquire new access token using client credentials.
                  This override can be used in case the application knows that conditional access policies changed
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  implementsWithMoniker:
  - value: <xref href="Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenForClientAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)?alt=Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenForClientAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)&text=AcquireTokenForClientAsync(IEnumerable%3CString%3E%2C+Boolean)" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)
  commentId: M:Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)
  name: AcquireTokenForClientAsync(IEnumerable<String>, Boolean)
  fullName: Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync(IEnumerable<String>, Boolean)
  nameWithType: ConfidentialClientApplication.AcquireTokenForClientAsync(IEnumerable<String>, Boolean)
  attributesWithMoniker:
  - value: System.ObsoleteAttribute
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: >-
        [System.Obsolete("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)]

        public System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult> AcquireTokenForClientAsync (System.Collections.Generic.IEnumerable<string> scopes, bool forceRefresh);
  - lang: fsharp
    values:
    - value: >-
        [<System.Obsolete("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)>]

        abstract member AcquireTokenForClientAsync : seq<string> * bool -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>

        override this.AcquireTokenForClientAsync : seq<string> * bool -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>
  - lang: vb
    values:
    - value: Public Function AcquireTokenForClientAsync (scopes As IEnumerable(Of String), forceRefresh As Boolean) As Task(Of AuthenticationResult)
  monikers:
  - msal-dotnet-latest
  seeAlso: >+
    - <xref:Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClient(System.Collections.Generic.IEnumerable%7bSystem.String%7d)>

  obsoleteMessagesWithMoniker:
  - value: 'Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes. '
  summary: >-
    [V2 API] Acquires a token from the authority configured in the app, for the confidential client itself (in the name of no user)

    using the client credentials flow. (See https://aka.ms/msal-net-client-credentials)
  metadata: {}
uid: Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync*
commentId: Overload:Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync
namespace: Microsoft.Identity.Client
name: AcquireTokenForClientAsync
fullName: Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync
nameWithType: ConfidentialClientApplication.AcquireTokenForClientAsync
assembliesWithMoniker:
- value: Microsoft.Identity.Client.dll
packagesWithMoniker:
- value: Microsoft.Identity.Client v4.49.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync
  api_location:
  - Microsoft.Identity.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync
  - Microsoft::Identity::Client::ConfidentialClientApplication::AcquireTokenForClientAsync
  - AcquireTokenForClientAsync
  - ConfidentialClientApplication.AcquireTokenForClientAsync
  - ConfidentialClientApplication::AcquireTokenForClientAsync
  helpviewer_keywords:
  - ConfidentialClientApplication.AcquireTokenForClientAsync method [.NET]
  - AcquireTokenForClientAsync method [.NET], class ConfidentialClientApplication
  - ConfidentialClientApplication.AcquireTokenForClientAsync(IEnumerable<String>) method [.NET]
  - AcquireTokenForClientAsync(IEnumerable<String>) method [.NET], class ConfidentialClientApplication
  - ConfidentialClientApplication.AcquireTokenForClientAsync(IEnumerable<String>, Boolean) method [.NET]
  - AcquireTokenForClientAsync(IEnumerable<String>, Boolean) method [.NET], class ConfidentialClientApplication
  monikers:
  - msal-dotnet-latest
