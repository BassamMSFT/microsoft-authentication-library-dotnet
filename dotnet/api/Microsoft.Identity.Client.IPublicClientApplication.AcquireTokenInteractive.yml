### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder?alt=Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder&text=AcquireTokenInteractiveParameterBuilder" data-throw-if-not-resolved="True"/>
    description: A builder enabling you to add optional parameters before executing the token request
  parameters:
  - namesWithMoniker:
    - value: scopes
    description: Scopes requested to access a protected API
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  type: method
  uid: Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive(System.Collections.Generic.IEnumerable{System.String})
  name: AcquireTokenInteractive(IEnumerable<String>)
  fullName: Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive(IEnumerable<String>)
  nameWithType: IPublicClientApplication.AcquireTokenInteractive(IEnumerable<String>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder AcquireTokenInteractive (System.Collections.Generic.IEnumerable<string> scopes);
  - lang: fsharp
    values:
    - value: 'abstract member AcquireTokenInteractive : seq<string> -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder'
  - lang: vb
    values:
    - value: Public Function AcquireTokenInteractive (scopes As IEnumerable(Of String)) As AcquireTokenInteractiveParameterBuilder
  monikers:
  - msal-dotnet-latest
  summary: >-
    Interactive request to acquire a token for the specified scopes. The interactive window will be parented to the specified

    window. The user will be required to select an account
  remarks: "<p>The user will be signed-in interactively if needed, and will consent to scopes and do multi-factor authentication if such a policy was enabled in the Azure AD tenant. You can also pass optional parameters by calling: <table><tbody><tr><td><xref data-throw-if-not-resolved=\"true\" uid=\"Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithPrompt(Microsoft.Identity.Client.Prompt)\"></xref></td><td>to specify the user experience when signing-in</td></tr><tr><td><xref data-throw-if-not-resolved=\"true\" uid=\"Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithUseEmbeddedWebView(System.Boolean)\"></xref></td><td>to specify if you want to use the embedded web browser or the system default browser</td></tr><tr><td><xref data-throw-if-not-resolved=\"true\" uid=\"Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithSystemWebViewOptions(Microsoft.Identity.Client.SystemWebViewOptions)\"></xref></td><td>to configure the user experience when using the Default browser</td></tr><tr><td><xref data-throw-if-not-resolved=\"true\" uid=\"Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithAccount(Microsoft.Identity.Client.IAccount)\"></xref> or <xref data-throw-if-not-resolved=\"true\" uid=\"Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithLoginHint(System.String)\"></xref></td><td>to prevent the select account dialog from appearing in the case you want to sign-in a specific accounts</td></tr><tr><td><xref data-throw-if-not-resolved=\"true\" uid=\"Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithExtraScopesToConsent(System.Collections.Generic.IEnumerable{System.String})\"></xref></td><td>if you want to let the user pre-consent to additional scopes (which won't be returned in the access token)</td></tr><tr><td><xref data-throw-if-not-resolved=\"true\" uid=\"Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})\"></xref></td><td>to pass additional query parameters to the Identity Provider, and <xref data-throw-if-not-resolved=\"true\" uid=\"Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithTenantId(System.String)\"></xref> in order to change the tenant of the authority set at the application construction. </td></tr></tbody></table></p>"
  metadata: {}
uid: Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive*
commentId: Overload:Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive
namespace: Microsoft.Identity.Client
name: AcquireTokenInteractive
fullName: Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive
nameWithType: IPublicClientApplication.AcquireTokenInteractive
assembliesWithMoniker:
- value: Microsoft.Identity.Client.dll
packagesWithMoniker:
- value: Microsoft.Identity.Client v4.49.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive
  api_location:
  - Microsoft.Identity.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive
  - Microsoft::Identity::Client::IPublicClientApplication::AcquireTokenInteractive
  - AcquireTokenInteractive
  - IPublicClientApplication.AcquireTokenInteractive
  - IPublicClientApplication::AcquireTokenInteractive
  helpviewer_keywords:
  - IPublicClientApplication.AcquireTokenInteractive method [.NET]
  - AcquireTokenInteractive method [.NET], interface IPublicClientApplication
  - IPublicClientApplication.AcquireTokenInteractive(IEnumerable<String>) method [.NET]
  - AcquireTokenInteractive(IEnumerable<String>) method [.NET], interface IPublicClientApplication
  monikers:
  - msal-dotnet-latest
