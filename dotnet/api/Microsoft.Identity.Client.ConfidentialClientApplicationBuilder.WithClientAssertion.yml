### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.Identity.Client.ConfidentialClientApplicationBuilder?alt=Microsoft.Identity.Client.ConfidentialClientApplicationBuilder&text=ConfidentialClientApplicationBuilder" data-throw-if-not-resolved="True"/>
    description: The ConfidentialClientApplicationBuilder to chain more .With methods
  parameters:
  - namesWithMoniker:
    - value: clientAssertionAsyncDelegate
    description: >-
      An async delegate computing the client assertion used to prove the identity of the application to Azure AD.
                  This is a delegate that computes a Base-64 encoded JWT for each authentication call.
    type: <xref href="System.Func`2?alt=System.Func&text=Func" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.Identity.Client.AssertionRequestOptions?alt=Microsoft.Identity.Client.AssertionRequestOptions&text=AssertionRequestOptions" data-throw-if-not-resolved="True"/>,<xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;&gt;
  type: method
  uid: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func{Microsoft.Identity.Client.AssertionRequestOptions,System.Threading.Tasks.Task{System.String}})
  commentId: M:Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func{Microsoft.Identity.Client.AssertionRequestOptions,System.Threading.Tasks.Task{System.String}})
  name: WithClientAssertion(Func<AssertionRequestOptions,Task<String>>)
  fullName: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(Func<AssertionRequestOptions,Task<String>>)
  nameWithType: ConfidentialClientApplicationBuilder.WithClientAssertion(Func<AssertionRequestOptions,Task<String>>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public Microsoft.Identity.Client.ConfidentialClientApplicationBuilder WithClientAssertion (Func<Microsoft.Identity.Client.AssertionRequestOptions,System.Threading.Tasks.Task<string>> clientAssertionAsyncDelegate);
  - lang: fsharp
    values:
    - value: 'member this.WithClientAssertion : Func<Microsoft.Identity.Client.AssertionRequestOptions, System.Threading.Tasks.Task<string>> -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder'
  - lang: vb
    values:
    - value: Public Function WithClientAssertion (clientAssertionAsyncDelegate As Func(Of AssertionRequestOptions, Task(Of String))) As ConfidentialClientApplicationBuilder
  monikers:
  - msal-dotnet-latest
  summary: Configures an async delegate that creates a client assertion. See https://aka.ms/msal-net-client-assertion
  remarks: Callers can use this mechanism to cache their assertions
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.Identity.Client.ConfidentialClientApplicationBuilder?alt=Microsoft.Identity.Client.ConfidentialClientApplicationBuilder&text=ConfidentialClientApplicationBuilder" data-throw-if-not-resolved="True"/>
    description: The ConfidentialClientApplicationBuilder to chain more .With methods
  parameters:
  - namesWithMoniker:
    - value: clientAssertionDelegate
    description: >-
      delegate computing the client assertion used to prove the identity of the application to Azure AD.
                  This is a delegate that computes a Base-64 encoded JWT for each authentication call.
    type: <xref href="System.Func`1?alt=System.Func&text=Func" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  type: method
  uid: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func{System.String})
  commentId: M:Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func{System.String})
  name: WithClientAssertion(Func<String>)
  fullName: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(Func<String>)
  nameWithType: ConfidentialClientApplicationBuilder.WithClientAssertion(Func<String>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public Microsoft.Identity.Client.ConfidentialClientApplicationBuilder WithClientAssertion (Func<string> clientAssertionDelegate);
  - lang: fsharp
    values:
    - value: 'member this.WithClientAssertion : Func<string> -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder'
  - lang: vb
    values:
    - value: Public Function WithClientAssertion (clientAssertionDelegate As Func(Of String)) As ConfidentialClientApplicationBuilder
  monikers:
  - msal-dotnet-latest
  summary: Configures a delegate that creates a client assertion. See https://aka.ms/msal-net-client-assertion
  remarks: Callers can use this mechanism to cache their assertions
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.Identity.Client.ConfidentialClientApplicationBuilder?alt=Microsoft.Identity.Client.ConfidentialClientApplicationBuilder&text=ConfidentialClientApplicationBuilder" data-throw-if-not-resolved="True"/>
    description: The ConfidentialClientApplicationBuilder to chain more .With methods
  parameters:
  - namesWithMoniker:
    - value: clientAssertionAsyncDelegate
    description: >-
      An async delegate computing the client assertion used to prove the identity of the application to Azure AD.
                  This is a delegate that computes a Base-64 encoded JWT for each authentication call.
    type: <xref href="System.Func`2?alt=System.Func&text=Func" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>,<xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;&gt;
  type: method
  uid: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})
  commentId: M:Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})
  name: WithClientAssertion(Func<CancellationToken,Task<String>>)
  fullName: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(Func<CancellationToken,Task<String>>)
  nameWithType: ConfidentialClientApplicationBuilder.WithClientAssertion(Func<CancellationToken,Task<String>>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public Microsoft.Identity.Client.ConfidentialClientApplicationBuilder WithClientAssertion (Func<System.Threading.CancellationToken,System.Threading.Tasks.Task<string>> clientAssertionAsyncDelegate);
  - lang: fsharp
    values:
    - value: 'member this.WithClientAssertion : Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<string>> -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder'
  - lang: vb
    values:
    - value: Public Function WithClientAssertion (clientAssertionAsyncDelegate As Func(Of CancellationToken, Task(Of String))) As ConfidentialClientApplicationBuilder
  monikers:
  - msal-dotnet-latest
  summary: Configures an async delegate that creates a client assertion. See https://aka.ms/msal-net-client-assertion
  remarks: Callers can use this mechanism to cache their assertions
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.Identity.Client.ConfidentialClientApplicationBuilder?alt=Microsoft.Identity.Client.ConfidentialClientApplicationBuilder&text=ConfidentialClientApplicationBuilder" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: signedClientAssertion
    description: The client assertion used to prove the identity of the application to Azure AD. This is a Base-64 encoded JWT.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.String)
  commentId: M:Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.String)
  name: WithClientAssertion(String)
  fullName: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(String)
  nameWithType: ConfidentialClientApplicationBuilder.WithClientAssertion(String)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public Microsoft.Identity.Client.ConfidentialClientApplicationBuilder WithClientAssertion (string signedClientAssertion);
  - lang: fsharp
    values:
    - value: 'member this.WithClientAssertion : string -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder'
  - lang: vb
    values:
    - value: Public Function WithClientAssertion (signedClientAssertion As String) As ConfidentialClientApplicationBuilder
  monikers:
  - msal-dotnet-latest
  summary: >-
    Sets the application client assertion. See https://aka.ms/msal-net-client-assertion.

    This will create an assertion that will be held within the client application's memory for the duration of the client.

    You can use <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion(System.Func{System.String})"></xref> to set a delegate that will be executed for each authentication request. 

    This will allow you to update the client assertion used by the client application once the assertion expires.
  metadata: {}
uid: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion*
commentId: Overload:Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion
namespace: Microsoft.Identity.Client
name: WithClientAssertion
fullName: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion
nameWithType: ConfidentialClientApplicationBuilder.WithClientAssertion
assembliesWithMoniker:
- value: Microsoft.Identity.Client.dll
packagesWithMoniker:
- value: Microsoft.Identity.Client v4.49.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion
  api_location:
  - Microsoft.Identity.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientAssertion
  - Microsoft::Identity::Client::ConfidentialClientApplicationBuilder::WithClientAssertion
  - WithClientAssertion
  - ConfidentialClientApplicationBuilder.WithClientAssertion
  - ConfidentialClientApplicationBuilder::WithClientAssertion
  helpviewer_keywords:
  - ConfidentialClientApplicationBuilder.WithClientAssertion method [.NET]
  - WithClientAssertion method [.NET], class ConfidentialClientApplicationBuilder
  - ConfidentialClientApplicationBuilder.WithClientAssertion(Func<AssertionRequestOptions,Task<String>>) method [.NET]
  - WithClientAssertion(Func<AssertionRequestOptions,Task<String>>) method [.NET], class ConfidentialClientApplicationBuilder
  - ConfidentialClientApplicationBuilder.WithClientAssertion(Func<String>) method [.NET]
  - WithClientAssertion(Func<String>) method [.NET], class ConfidentialClientApplicationBuilder
  - ConfidentialClientApplicationBuilder.WithClientAssertion(Func<CancellationToken,Task<String>>) method [.NET]
  - WithClientAssertion(Func<CancellationToken,Task<String>>) method [.NET], class ConfidentialClientApplicationBuilder
  - ConfidentialClientApplicationBuilder.WithClientAssertion(String) method [.NET]
  - WithClientAssertion(String) method [.NET], class ConfidentialClientApplicationBuilder
  monikers:
  - msal-dotnet-latest
