### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder?alt=Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder&text=AcquireTokenInteractiveParameterBuilder" data-throw-if-not-resolved="True"/>
    description: A builder enabling you to add optional parameters before executing the token request
  parameters:
  - namesWithMoniker:
    - value: scopes
    description: Scopes requested to access a protected API
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  implementsWithMoniker:
  - value: <xref href="Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive(System.Collections.Generic.IEnumerable{System.String})?alt=Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive(System.Collections.Generic.IEnumerable{System.String})&text=AcquireTokenInteractive(IEnumerable%3CString%3E)" data-throw-if-not-resolved="True"/>
  isNotClsCompliant: true
  type: method
  uid: Microsoft.Identity.Client.PublicClientApplication.AcquireTokenInteractive(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Identity.Client.PublicClientApplication.AcquireTokenInteractive(System.Collections.Generic.IEnumerable{System.String})
  name: AcquireTokenInteractive(IEnumerable<String>)
  fullName: Microsoft.Identity.Client.PublicClientApplication.AcquireTokenInteractive(IEnumerable<String>)
  nameWithType: PublicClientApplication.AcquireTokenInteractive(IEnumerable<String>)
  attributesWithMoniker:
  - value: System.CLSCompliantAttribute
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: >-
        [System.CLSCompliant(false)]

        public Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder AcquireTokenInteractive (System.Collections.Generic.IEnumerable<string> scopes);
  - lang: fsharp
    values:
    - value: >-
        [<System.CLSCompliant(false)>]

        abstract member AcquireTokenInteractive : seq<string> -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder

        override this.AcquireTokenInteractive : seq<string> -> Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder
  - lang: vb
    values:
    - value: Public Function AcquireTokenInteractive (scopes As IEnumerable(Of String)) As AcquireTokenInteractiveParameterBuilder
  monikers:
  - msal-dotnet-latest
  summary: >-
    Interactive request to acquire a token for the specified scopes. The interactive window will be parented to the specified

    window. The user will be required to select an account.
  remarks: <p>The user will be signed-in interactively if needed, and will consent to scopes and do multi-factor authentication if such a policy was enabled in the Azure AD tenant.</p><p>You can also pass optional parameters by calling:</p><p><xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithPrompt(Microsoft.Identity.Client.Prompt)"></xref> to specify the user experience when signing-in, <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithUseEmbeddedWebView(System.Boolean)"></xref> to specify if you want to use the embedded web browser or the system default browser, <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithSystemWebViewOptions(Microsoft.Identity.Client.SystemWebViewOptions)"></xref> to configure the user experience when using the Default browser, <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithAccount(Microsoft.Identity.Client.IAccount)"></xref> or <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithLoginHint(System.String)"></xref> to prevent the select account dialog from appearing in the case you want to sign-in a specific account, <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder.WithExtraScopesToConsent(System.Collections.Generic.IEnumerable{System.String})"></xref> if you want to let the user pre-consent to additional scopes (which won't be returned in the access token), <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})"></xref> to pass additional query parameters to the STS, and one of the overrides of <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(System.String,System.Boolean)"></xref> in order to override the default authority set at the application construction. Note that the overriding authority needs to be part of the known authorities added to the application construction.</p>
  metadata: {}
uid: Microsoft.Identity.Client.PublicClientApplication.AcquireTokenInteractive*
commentId: Overload:Microsoft.Identity.Client.PublicClientApplication.AcquireTokenInteractive
namespace: Microsoft.Identity.Client
name: AcquireTokenInteractive
fullName: Microsoft.Identity.Client.PublicClientApplication.AcquireTokenInteractive
nameWithType: PublicClientApplication.AcquireTokenInteractive
assembliesWithMoniker:
- value: Microsoft.Identity.Client.dll
packagesWithMoniker:
- value: Microsoft.Identity.Client v4.49.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Client.PublicClientApplication.AcquireTokenInteractive
  api_location:
  - Microsoft.Identity.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Client.PublicClientApplication.AcquireTokenInteractive
  - Microsoft::Identity::Client::PublicClientApplication::AcquireTokenInteractive
  - AcquireTokenInteractive
  - PublicClientApplication.AcquireTokenInteractive
  - PublicClientApplication::AcquireTokenInteractive
  helpviewer_keywords:
  - PublicClientApplication.AcquireTokenInteractive method [.NET]
  - AcquireTokenInteractive method [.NET], class PublicClientApplication
  - PublicClientApplication.AcquireTokenInteractive(IEnumerable<String>) method [.NET]
  - AcquireTokenInteractive(IEnumerable<String>) method [.NET], class PublicClientApplication
  monikers:
  - msal-dotnet-latest
