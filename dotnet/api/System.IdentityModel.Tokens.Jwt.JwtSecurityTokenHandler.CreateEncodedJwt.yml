### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: tokenDescriptor
    description: A <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor"></xref> that contains details of contents of the token.
    type: <xref href="Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor?alt=Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor&text=SecurityTokenDescriptor" data-throw-if-not-resolved="True"/>
  type: method
  uid: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor)
  commentId: M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor)
  name: CreateEncodedJwt(SecurityTokenDescriptor)
  fullName: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(SecurityTokenDescriptor)
  nameWithType: JwtSecurityTokenHandler.CreateEncodedJwt(SecurityTokenDescriptor)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateEncodedJwt (Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateEncodedJwt : Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor -> string

        override this.CreateEncodedJwt : Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateEncodedJwt (tokenDescriptor As SecurityTokenDescriptor) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Returns a Json Web Token (JWT).
  remarks: <p>A JWS and JWE can be returned.</p><p>If <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials"></xref>is provided, then a JWE will be created.</p><p>If <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials"></xref> is provided then a JWS will be created.</p><p>If both are provided then a JWE with an embedded JWS will be created.</p>
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A Base64UrlEncoded string in 'Compact Serialization Format'.
  parameters:
  - namesWithMoniker:
    - value: issuer
    description: The issuer of the token.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: audience
    description: The audience for this token.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: subject
    description: The source of the <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim"></xref>(s) for this token.
    type: <xref href="System.Security.Claims.ClaimsIdentity?alt=System.Security.Claims.ClaimsIdentity&text=ClaimsIdentity" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: notBefore
    description: The notbefore time for this token.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: expires
    description: The expiration time for this token.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: issuedAt
    description: The issue time for this token.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: signingCredentials
    description: Contains cryptographic material for generating a signature.
    type: <xref href="Microsoft.IdentityModel.Tokens.SigningCredentials?alt=Microsoft.IdentityModel.Tokens.SigningCredentials&text=SigningCredentials" data-throw-if-not-resolved="True"/>
  type: method
  uid: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials)
  commentId: M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials)
  name: CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, SigningCredentials)
  fullName: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, SigningCredentials)
  nameWithType: JwtSecurityTokenHandler.CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, SigningCredentials)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateEncodedJwt (string issuer, string audience, System.Security.Claims.ClaimsIdentity subject, DateTime? notBefore, DateTime? expires, DateTime? issuedAt, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateEncodedJwt : string * string * System.Security.Claims.ClaimsIdentity * Nullable<DateTime> * Nullable<DateTime> * Nullable<DateTime> * Microsoft.IdentityModel.Tokens.SigningCredentials -> string

        override this.CreateEncodedJwt : string * string * System.Security.Claims.ClaimsIdentity * Nullable<DateTime> * Nullable<DateTime> * Nullable<DateTime> * Microsoft.IdentityModel.Tokens.SigningCredentials -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateEncodedJwt (issuer As String, audience As String, subject As ClaimsIdentity, notBefore As Nullable(Of DateTime), expires As Nullable(Of DateTime), issuedAt As Nullable(Of DateTime), signingCredentials As SigningCredentials) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWT in 'Compact Serialization Format'.
  remarks: <p>If <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.ClaimsIdentity.Actor"></xref> is not null, then a claim { actort, 'value' } will be added to the payload. See <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)"></xref> for details on how the value is created.</p><p>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"></seealso> for details on how the HeaderParameters are added to the header.</p><p>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"></seealso> for details on how the values are added to the payload.</p><p>Each <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim"></xref> in the <code data-dev-comment-type="paramref">subject</code> will map <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim.Type"></xref> by applying <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap"></xref>. Modifying <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap"></xref> could change the outbound JWT.</p><p>If <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.SigningCredentials"></xref> is provided, then a JWS will be created.</p>
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A Base64UrlEncoded string in 'Compact Serialization Format'.
  parameters:
  - namesWithMoniker:
    - value: issuer
    description: The issuer of the token.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: audience
    description: The audience for this token.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: subject
    description: The source of the <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim"></xref>(s) for this token.
    type: <xref href="System.Security.Claims.ClaimsIdentity?alt=System.Security.Claims.ClaimsIdentity&text=ClaimsIdentity" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: notBefore
    description: Translated into 'epoch time' and assigned to 'nbf'.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: expires
    description: Translated into 'epoch time' and assigned to 'exp'.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: issuedAt
    description: Translated into 'epoch time' and assigned to 'iat'.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: signingCredentials
    description: Contains cryptographic material for signing.
    type: <xref href="Microsoft.IdentityModel.Tokens.SigningCredentials?alt=Microsoft.IdentityModel.Tokens.SigningCredentials&text=SigningCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Contains cryptographic material for encrypting.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: If 'expires' &lt;= 'notBefore'.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  type: method
  uid: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials)
  commentId: M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials)
  name: >-
    CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>,

     Nullable<DateTime>, Nullable<DateTime>, SigningCredentials, EncryptingCredentials)
  fullName: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, SigningCredentials, EncryptingCredentials)
  nameWithType: JwtSecurityTokenHandler.CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, SigningCredentials, EncryptingCredentials)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateEncodedJwt (string issuer, string audience, System.Security.Claims.ClaimsIdentity subject, DateTime? notBefore, DateTime? expires, DateTime? issuedAt, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateEncodedJwt : string * string * System.Security.Claims.ClaimsIdentity * Nullable<DateTime> * Nullable<DateTime> * Nullable<DateTime> * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials -> string

        override this.CreateEncodedJwt : string * string * System.Security.Claims.ClaimsIdentity * Nullable<DateTime> * Nullable<DateTime> * Nullable<DateTime> * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateEncodedJwt (issuer As String, audience As String, subject As ClaimsIdentity, notBefore As Nullable(Of DateTime), expires As Nullable(Of DateTime), issuedAt As Nullable(Of DateTime), signingCredentials As SigningCredentials, encryptingCredentials As EncryptingCredentials) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWT in 'Compact Serialization Format'.
  remarks: <p>If <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.ClaimsIdentity.Actor"></xref> is not null, then a claim { actort, 'value' } will be added to the payload. <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)"></xref> for details on how the value is created.</p><p>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"></seealso> for details on how the HeaderParameters are added to the header.</p><p>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"></seealso> for details on how the values are added to the payload.</p><p>Each <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim"></xref> in the <code data-dev-comment-type="paramref">subject</code> will map <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim.Type"></xref> by applying <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap"></xref>. Modifying <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap"></xref> could change the outbound JWT.</p>
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A Base64UrlEncoded string in 'Compact Serialization Format'.
  parameters:
  - namesWithMoniker:
    - value: issuer
    description: The issuer of the token.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: audience
    description: The audience for this token.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: subject
    description: The source of the <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim"></xref>(s) for this token.
    type: <xref href="System.Security.Claims.ClaimsIdentity?alt=System.Security.Claims.ClaimsIdentity&text=ClaimsIdentity" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: notBefore
    description: Translated into 'epoch time' and assigned to 'nbf'.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: expires
    description: Translated into 'epoch time' and assigned to 'exp'.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: issuedAt
    description: Translated into 'epoch time' and assigned to 'iat'.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: signingCredentials
    description: Contains cryptographic material for signing.
    type: <xref href="Microsoft.IdentityModel.Tokens.SigningCredentials?alt=Microsoft.IdentityModel.Tokens.SigningCredentials&text=SigningCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Contains cryptographic material for encrypting.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: claimCollection
    description: A collection of (key,value) pairs representing <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim"></xref>(s) for this token.
    type: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>&gt;
  exceptions:
  - description: If 'expires' &lt;= 'notBefore'.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  type: method
  uid: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})
  name: >-
    CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>,

     Nullable<DateTime>, Nullable<DateTime>, SigningCredentials, EncryptingCredentials,

     IDictionary<String,Object>)
  fullName: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, SigningCredentials, EncryptingCredentials, IDictionary<String,Object>)
  nameWithType: JwtSecurityTokenHandler.CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, SigningCredentials, EncryptingCredentials, IDictionary<String,Object>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateEncodedJwt (string issuer, string audience, System.Security.Claims.ClaimsIdentity subject, DateTime? notBefore, DateTime? expires, DateTime? issuedAt, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, System.Collections.Generic.IDictionary<string,object> claimCollection);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateEncodedJwt : string * string * System.Security.Claims.ClaimsIdentity * Nullable<DateTime> * Nullable<DateTime> * Nullable<DateTime> * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials * System.Collections.Generic.IDictionary<string, obj> -> string

        override this.CreateEncodedJwt : string * string * System.Security.Claims.ClaimsIdentity * Nullable<DateTime> * Nullable<DateTime> * Nullable<DateTime> * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials * System.Collections.Generic.IDictionary<string, obj> -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateEncodedJwt (issuer As String, audience As String, subject As ClaimsIdentity, notBefore As Nullable(Of DateTime), expires As Nullable(Of DateTime), issuedAt As Nullable(Of DateTime), signingCredentials As SigningCredentials, encryptingCredentials As EncryptingCredentials, claimCollection As IDictionary(Of String, Object)) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWT in 'Compact Serialization Format'.
  remarks: <p>If <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.ClaimsIdentity.Actor"></xref> is not null, then a claim { actort, 'value' } will be added to the payload. <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)"></xref> for details on how the value is created.</p><p>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"></seealso> for details on how the HeaderParameters are added to the header.</p><p>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"></seealso> for details on how the values are added to the payload.</p><p>Each <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim"></xref> in the <code data-dev-comment-type="paramref">subject</code> will map <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim.Type"></xref> by applying <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap"></xref>. Modifying <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap"></xref> could change the outbound JWT.</p>
  metadata: {}
uid: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt*
commentId: Overload:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt
namespace: System.IdentityModel.Tokens.Jwt
name: CreateEncodedJwt
fullName: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt
nameWithType: JwtSecurityTokenHandler.CreateEncodedJwt
assembliesWithMoniker:
- value: System.IdentityModel.Tokens.Jwt.dll
packagesWithMoniker:
- value: System.IdentityModel.Tokens.Jwt v6.25.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-web-dotnet-latest
metadata:
  api_name:
  - System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt
  api_location:
  - System.IdentityModel.Tokens.Jwt.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt
  - System::IdentityModel::Tokens::Jwt::JwtSecurityTokenHandler::CreateEncodedJwt
  - CreateEncodedJwt
  - JwtSecurityTokenHandler.CreateEncodedJwt
  - JwtSecurityTokenHandler::CreateEncodedJwt
  helpviewer_keywords:
  - JwtSecurityTokenHandler.CreateEncodedJwt method [.NET]
  - CreateEncodedJwt method [.NET], class JwtSecurityTokenHandler
  - JwtSecurityTokenHandler.CreateEncodedJwt(SecurityTokenDescriptor) method [.NET]
  - CreateEncodedJwt(SecurityTokenDescriptor) method [.NET], class JwtSecurityTokenHandler
  - JwtSecurityTokenHandler.CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, SigningCredentials) method [.NET]
  - CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, SigningCredentials) method [.NET], class JwtSecurityTokenHandler
  - JwtSecurityTokenHandler.CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, SigningCredentials, EncryptingCredentials) method [.NET]
  - CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, SigningCredentials, EncryptingCredentials) method [.NET], class JwtSecurityTokenHandler
  - JwtSecurityTokenHandler.CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, SigningCredentials, EncryptingCredentials, IDictionary<String,Object>) method [.NET]
  - CreateEncodedJwt(String, String, ClaimsIdentity, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, SigningCredentials, EncryptingCredentials, IDictionary<String,Object>) method [.NET], class JwtSecurityTokenHandler
  monikers:
  - msal-web-dotnet-latest
