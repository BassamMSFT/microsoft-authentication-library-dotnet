### YamlMime:NetMember
type: constructor
members:
- parameters:
  - namesWithMoniker:
    - value: clientId
    description: >-
      Client ID (also known as App ID) of the application as registered in the
                   application registration portal (https://aka.ms/msal-net-register-app)/. REQUIRED
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: redirectUri
    description: URL where the STS will call back the application with the security token. REQUIRED
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: clientCredential
    description: >-
      Credential, previously shared with Azure AD during the application registration and proving the identity
                   of the application. An instance of ClientCredential can be created either from an application secret, or a certificate. REQUIRED.
    type: <xref href="Microsoft.Identity.Client.ClientCredential?alt=Microsoft.Identity.Client.ClientCredential&text=ClientCredential" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: userTokenCache
    description: >-
      Token cache for saving user tokens. Can be set to null if the confidential client
                   application only uses the Client Credentials grants (that is requests token in its own name and not in the name of users).
                   Otherwise should be provided. REQUIRED
    type: <xref href="Microsoft.Identity.Client.TokenCache?alt=Microsoft.Identity.Client.TokenCache&text=TokenCache" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: appTokenCache
    description: >-
      Token cache for saving application (that is client token). Can be set to <code data-dev-comment-type="c">null</code> except if the application
                   uses the client credentials grants
    type: <xref href="Microsoft.Identity.Client.TokenCache?alt=Microsoft.Identity.Client.TokenCache&text=TokenCache" data-throw-if-not-resolved="True"/>
  type: constructor
  uid: Microsoft.Identity.Client.ConfidentialClientApplication.#ctor(System.String,System.String,Microsoft.Identity.Client.ClientCredential,Microsoft.Identity.Client.TokenCache,Microsoft.Identity.Client.TokenCache)
  commentId: M:Microsoft.Identity.Client.ConfidentialClientApplication.#ctor(System.String,System.String,Microsoft.Identity.Client.ClientCredential,Microsoft.Identity.Client.TokenCache,Microsoft.Identity.Client.TokenCache)
  name: ConfidentialClientApplication(String, String, ClientCredential, TokenCache, TokenCache)
  fullName: Microsoft.Identity.Client.ConfidentialClientApplication.ConfidentialClientApplication(String, String, ClientCredential, TokenCache, TokenCache)
  nameWithType: ConfidentialClientApplication.ConfidentialClientApplication(String, String, ClientCredential, TokenCache, TokenCache)
  attributesWithMoniker:
  - value: System.ObsoleteAttribute
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: >-
        [System.Obsolete("Use ConfidentialClientApplicationBuilder instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)]

        public ConfidentialClientApplication (string clientId, string redirectUri, Microsoft.Identity.Client.ClientCredential clientCredential, Microsoft.Identity.Client.TokenCache userTokenCache, Microsoft.Identity.Client.TokenCache appTokenCache);
  - lang: fsharp
    values:
    - value: >-
        [<System.Obsolete("Use ConfidentialClientApplicationBuilder instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)>]

        new Microsoft.Identity.Client.ConfidentialClientApplication : string * string * Microsoft.Identity.Client.ClientCredential * Microsoft.Identity.Client.TokenCache * Microsoft.Identity.Client.TokenCache -> Microsoft.Identity.Client.ConfidentialClientApplication
  - lang: vb
    values:
    - value: Public Sub New (clientId As String, redirectUri As String, clientCredential As ClientCredential, userTokenCache As TokenCache, appTokenCache As TokenCache)
  monikers:
  - msal-dotnet-latest
  seeAlso: >+
    - <xref:Microsoft.Identity.Client.ConfidentialClientApplication>

  obsoleteMessagesWithMoniker:
  - value: 'Use ConfidentialClientApplicationBuilder instead. See https://aka.ms/msal-net-3-breaking-changes. '
  summary: '[V2 API] Constructor for a confidential client application requesting tokens with the default authority (<xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.ClientApplicationBase.DefaultAuthority"></xref>)'
  remarks: <p>See https://aka.ms/msal-net-client-applications for a description of confidential client applications (and public client applications) Client credential grants are overrides of <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync(System.Collections.Generic.IEnumerable{System.String})"></xref></p><p>See also <xref data-throw-if-not-resolved="true" uid="ConfidentialClientApplicationBuilder"></xref> for the V3 API way of building a confidential client application with a builder pattern. It offers building the application from configuration options, and a more fluid way of providing parameters.</p>
  metadata: {}
- parameters:
  - namesWithMoniker:
    - value: clientId
    description: >-
      Client ID (also named Application ID) of the application as registered in the
                   application registration portal (https://aka.ms/msal-net-register-app)/. REQUIRED
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: authority
    description: >-
      Authority of the security token service (STS) from which MSAL.NET will acquire the tokens.
                   Usual authorities are:
                   <ul><li><code data-dev-comment-type="c">https://login.microsoftonline.com/tenant/</code>, where <code data-dev-comment-type="c">tenant</code> is the tenant ID of the Azure AD tenant
                   or a domain associated with this Azure AD tenant, in order to sign-in users of a specific organization only</li><li><code data-dev-comment-type="c">https://login.microsoftonline.com/common/</code> to sign-in users with any work and school accounts or Microsoft personal accounts</li><li><code data-dev-comment-type="c">https://login.microsoftonline.com/organizations/</code> to sign-in users with any work and school accounts</li><li><code data-dev-comment-type="c">https://login.microsoftonline.com/consumers/</code> to sign-in users with only personal Microsoft accounts(live)</li></ul>
                   Note that this setting needs to be consistent with what is declared in the application registration portal
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: redirectUri
    description: URL where the STS will call back the application with the security token. REQUIRED
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: clientCredential
    description: >-
      Credential, previously shared with Azure AD during the application registration and proving the identity
                   of the application. An instance of <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.ClientCredential"></xref> can be created either from an application secret, or a certificate. REQUIRED.
    type: <xref href="Microsoft.Identity.Client.ClientCredential?alt=Microsoft.Identity.Client.ClientCredential&text=ClientCredential" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: userTokenCache
    description: >-
      Token cache for saving user tokens. Can be set to null if the confidential client
                   application only uses the Client Credentials grants (that is requests token in its own name and not in the name of users).
                   Otherwise should be provided. REQUIRED
    type: <xref href="Microsoft.Identity.Client.TokenCache?alt=Microsoft.Identity.Client.TokenCache&text=TokenCache" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: appTokenCache
    description: >-
      Token cache for saving application (that is client token). Can be set to <code data-dev-comment-type="c">null</code> except if the application
                   uses the client credentials grants
    type: <xref href="Microsoft.Identity.Client.TokenCache?alt=Microsoft.Identity.Client.TokenCache&text=TokenCache" data-throw-if-not-resolved="True"/>
  type: constructor
  uid: Microsoft.Identity.Client.ConfidentialClientApplication.#ctor(System.String,System.String,System.String,Microsoft.Identity.Client.ClientCredential,Microsoft.Identity.Client.TokenCache,Microsoft.Identity.Client.TokenCache)
  commentId: M:Microsoft.Identity.Client.ConfidentialClientApplication.#ctor(System.String,System.String,System.String,Microsoft.Identity.Client.ClientCredential,Microsoft.Identity.Client.TokenCache,Microsoft.Identity.Client.TokenCache)
  name: ConfidentialClientApplication(String, String, String, ClientCredential, TokenCache, TokenCache)
  fullName: Microsoft.Identity.Client.ConfidentialClientApplication.ConfidentialClientApplication(String, String, String, ClientCredential, TokenCache, TokenCache)
  nameWithType: ConfidentialClientApplication.ConfidentialClientApplication(String, String, String, ClientCredential, TokenCache, TokenCache)
  attributesWithMoniker:
  - value: System.ObsoleteAttribute
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: >-
        [System.Obsolete("Use ConfidentialClientApplicationBuilder instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)]

        public ConfidentialClientApplication (string clientId, string authority, string redirectUri, Microsoft.Identity.Client.ClientCredential clientCredential, Microsoft.Identity.Client.TokenCache userTokenCache, Microsoft.Identity.Client.TokenCache appTokenCache);
  - lang: fsharp
    values:
    - value: >-
        [<System.Obsolete("Use ConfidentialClientApplicationBuilder instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)>]

        new Microsoft.Identity.Client.ConfidentialClientApplication : string * string * string * Microsoft.Identity.Client.ClientCredential * Microsoft.Identity.Client.TokenCache * Microsoft.Identity.Client.TokenCache -> Microsoft.Identity.Client.ConfidentialClientApplication
  - lang: vb
    values:
    - value: Public Sub New (clientId As String, authority As String, redirectUri As String, clientCredential As ClientCredential, userTokenCache As TokenCache, appTokenCache As TokenCache)
  monikers:
  - msal-dotnet-latest
  seeAlso: >+
    - <xref:Microsoft.Identity.Client.ConfidentialClientApplication>

  obsoleteMessagesWithMoniker:
  - value: 'Use ConfidentialClientApplicationBuilder instead. See https://aka.ms/msal-net-3-breaking-changes. '
  summary: '[V2 API] Constructor for a confidential client application requesting tokens with a specified authority'
  remarks: <p>See https://aka.ms/msal-net-client-applications for a description of confidential client applications (and public client applications) Client credential grants are overrides of <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenForClientAsync(System.Collections.Generic.IEnumerable{System.String})"></xref></p><p>See also <xref data-throw-if-not-resolved="true" uid="ConfidentialClientApplicationBuilder"></xref> for the V3 API way of building a confidential client application with a builder pattern. It offers building the application from configuration options, and a more fluid way of providing parameters.</p>
  metadata: {}
uid: Microsoft.Identity.Client.ConfidentialClientApplication.#ctor*
commentId: Overload:Microsoft.Identity.Client.ConfidentialClientApplication.#ctor
namespace: Microsoft.Identity.Client
name: ConfidentialClientApplication
fullName: Microsoft.Identity.Client.ConfidentialClientApplication.ConfidentialClientApplication
nameWithType: ConfidentialClientApplication.ConfidentialClientApplication
assembliesWithMoniker:
- value: Microsoft.Identity.Client.dll
packagesWithMoniker:
- value: Microsoft.Identity.Client v4.49.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Client.ConfidentialClientApplication..ctor
  api_location:
  - Microsoft.Identity.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Client.ConfidentialClientApplication.#ctor
  - Microsoft::Identity::Client::ConfidentialClientApplication::#ctor
  - '#ctor'
  - ConfidentialClientApplication.#ctor
  - ConfidentialClientApplication::#ctor
  helpviewer_keywords:
  - ConfidentialClientApplication class [.NET], constructors
  - ConfidentialClientApplication(String, String, ClientCredential, TokenCache, TokenCache) class [.NET], constructors
  - ConfidentialClientApplication(String, String, String, ClientCredential, TokenCache, TokenCache) class [.NET], constructors
  monikers:
  - msal-dotnet-latest
