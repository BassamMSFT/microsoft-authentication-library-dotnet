### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.Identity.Client.ConfidentialClientApplicationBuilder?alt=Microsoft.Identity.Client.ConfidentialClientApplicationBuilder&text=ConfidentialClientApplicationBuilder" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: enableCacheSynchronization
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCacheSynchronization(System.Boolean)
  commentId: M:Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCacheSynchronization(System.Boolean)
  name: WithCacheSynchronization(Boolean)
  fullName: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCacheSynchronization(Boolean)
  nameWithType: ConfidentialClientApplicationBuilder.WithCacheSynchronization(Boolean)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public Microsoft.Identity.Client.ConfidentialClientApplicationBuilder WithCacheSynchronization (bool enableCacheSynchronization);
  - lang: fsharp
    values:
    - value: 'member this.WithCacheSynchronization : bool -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder'
  - lang: vb
    values:
    - value: Public Function WithCacheSynchronization (enableCacheSynchronization As Boolean) As ConfidentialClientApplicationBuilder
  monikers:
  - msal-dotnet-latest
  summary: >-
    When set to <code data-dev-comment-type="c">true</code>, MSAL will lock cache access at the <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.ConfidentialClientApplication"></xref> level, i.e.

    the block of code between BeforeAccessAsync and AfterAccessAsync callbacks will be synchronized. 

    Apps can set this flag to <code data-dev-comment-type="c">false</code> to enable an optimistic cache locking strategy, which may result in better performance, especially 

    when ConfidentialClientApplication objects are reused.
  remarks: <p>False by default. Not recommended for apps that call RemoveAsync</p>
  metadata: {}
uid: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCacheSynchronization*
commentId: Overload:Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCacheSynchronization
namespace: Microsoft.Identity.Client
name: WithCacheSynchronization
fullName: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCacheSynchronization
nameWithType: ConfidentialClientApplicationBuilder.WithCacheSynchronization
assembliesWithMoniker:
- value: Microsoft.Identity.Client.dll
packagesWithMoniker:
- value: Microsoft.Identity.Client v4.49.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCacheSynchronization
  api_location:
  - Microsoft.Identity.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithCacheSynchronization
  - Microsoft::Identity::Client::ConfidentialClientApplicationBuilder::WithCacheSynchronization
  - WithCacheSynchronization
  - ConfidentialClientApplicationBuilder.WithCacheSynchronization
  - ConfidentialClientApplicationBuilder::WithCacheSynchronization
  helpviewer_keywords:
  - ConfidentialClientApplicationBuilder.WithCacheSynchronization method [.NET]
  - WithCacheSynchronization method [.NET], class ConfidentialClientApplicationBuilder
  - ConfidentialClientApplicationBuilder.WithCacheSynchronization(Boolean) method [.NET]
  - WithCacheSynchronization(Boolean) method [.NET], class ConfidentialClientApplicationBuilder
  monikers:
  - msal-dotnet-latest
