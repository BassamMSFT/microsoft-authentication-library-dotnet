### YamlMime:NetMember
type: constructor
members:
- type: constructor
  uid: System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor
  commentId: M:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor
  name: JwtPayload()
  fullName: System.IdentityModel.Tokens.Jwt.JwtPayload.JwtPayload()
  nameWithType: JwtPayload.JwtPayload()
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public JwtPayload ();
  - lang: vb
    values:
    - value: Public Sub New ()
  monikers:
  - msal-web-dotnet-latest
  summary: >-
    Initializes a new instance of the <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtPayload"></xref> class with no claims. Default string comparer <xref data-throw-if-not-resolved="true" uid="System.StringComparer.Ordinal"></xref>. 

    Creates a empty <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtPayload"></xref>
  metadata: {}
- parameters:
  - namesWithMoniker:
    - value: claims
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Security.Claims.Claim?alt=System.Security.Claims.Claim&text=Claim" data-throw-if-not-resolved="True"/>&gt;
  type: constructor
  uid: System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  commentId: M:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  name: JwtPayload(IEnumerable<Claim>)
  fullName: System.IdentityModel.Tokens.Jwt.JwtPayload.JwtPayload(IEnumerable<Claim>)
  nameWithType: JwtPayload.JwtPayload(IEnumerable<Claim>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public JwtPayload (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
  - lang: fsharp
    values:
    - value: 'new System.IdentityModel.Tokens.Jwt.JwtPayload : seq<System.Security.Claims.Claim> -> System.IdentityModel.Tokens.Jwt.JwtPayload'
  - lang: vb
    values:
    - value: Public Sub New (claims As IEnumerable(Of Claim))
  monikers:
  - msal-web-dotnet-latest
  summary: >-
    Initializes a new instance of the <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtPayload"></xref> class with <xref data-throw-if-not-resolved="true" uid="System.Collections.Generic.IEnumerable`1"></xref>. Default string comparer <xref data-throw-if-not-resolved="true" uid="System.StringComparer.Ordinal"></xref>.

    <param name="claims">The claims to add.</param>
  metadata: {}
- parameters:
  - namesWithMoniker:
    - value: issuer
    description: If this value is not null, a { iss, 'issuer' } claim will be added, overwriting any 'iss' claim in 'claims' if present.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: audience
    description: If this value is not null, a { aud, 'audience' } claim will be added, appending to any 'aud' claims in 'claims' if present.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: claims
    description: If this value is not null then for each <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim"></xref> a { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Security.Claims.Claim?alt=System.Security.Claims.Claim&text=Claim" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: notBefore
    description: If notbefore.HasValue a { nbf, 'value' } claim is added, overwriting any 'nbf' claim in 'claims' if present.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: expires
    description: If expires.HasValue a { exp, 'value' } claim is added, overwriting any 'exp' claim in 'claims' if present.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  type: constructor
  uid: System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Nullable{System.DateTime},System.Nullable{System.DateTime})
  commentId: M:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Nullable{System.DateTime},System.Nullable{System.DateTime})
  name: JwtPayload(String, String, IEnumerable<Claim>, Nullable<DateTime>, Nullable<DateTime>)
  fullName: System.IdentityModel.Tokens.Jwt.JwtPayload.JwtPayload(String, String, IEnumerable<Claim>, Nullable<DateTime>, Nullable<DateTime>)
  nameWithType: JwtPayload.JwtPayload(String, String, IEnumerable<Claim>, Nullable<DateTime>, Nullable<DateTime>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public JwtPayload (string issuer, string audience, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, DateTime? notBefore, DateTime? expires);
  - lang: fsharp
    values:
    - value: 'new System.IdentityModel.Tokens.Jwt.JwtPayload : string * string * seq<System.Security.Claims.Claim> * Nullable<DateTime> * Nullable<DateTime> -> System.IdentityModel.Tokens.Jwt.JwtPayload'
  - lang: vb
    values:
    - value: Public Sub New (issuer As String, audience As String, claims As IEnumerable(Of Claim), notBefore As Nullable(Of DateTime), expires As Nullable(Of DateTime))
  monikers:
  - msal-web-dotnet-latest
  summary: Initializes a new instance of the <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtPayload"></xref> class with claims added for each parameter specified. Default string comparer <xref data-throw-if-not-resolved="true" uid="System.StringComparer.Ordinal"></xref>.
  metadata: {}
- parameters:
  - namesWithMoniker:
    - value: issuer
    description: If this value is not null, a { iss, 'issuer' } claim will be added, overwriting any 'iss' claim in 'claims' if present.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: audience
    description: If this value is not null, a { aud, 'audience' } claim will be added, appending to any 'aud' claims in 'claims' if present.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: claims
    description: If this value is not null then for each <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim"></xref> a { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Security.Claims.Claim?alt=System.Security.Claims.Claim&text=Claim" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: notBefore
    description: If notbefore.HasValue a { nbf, 'value' } claim is added, overwriting any 'nbf' claim in 'claims' if present.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: expires
    description: If expires.HasValue a { exp, 'value' } claim is added, overwriting any 'exp' claim in 'claims' if present.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: issuedAt
    description: If issuedAt.HasValue is 'true' a { iat, 'value' } claim is added, overwriting any 'iat' claim in 'claims' if present.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  exceptions:
  - description: If 'expires' &lt;= 'notbefore'.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  type: constructor
  uid: System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})
  commentId: M:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})
  name: JwtPayload(String, String, IEnumerable<Claim>, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>)
  fullName: System.IdentityModel.Tokens.Jwt.JwtPayload.JwtPayload(String, String, IEnumerable<Claim>, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>)
  nameWithType: JwtPayload.JwtPayload(String, String, IEnumerable<Claim>, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public JwtPayload (string issuer, string audience, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, DateTime? notBefore, DateTime? expires, DateTime? issuedAt);
  - lang: fsharp
    values:
    - value: 'new System.IdentityModel.Tokens.Jwt.JwtPayload : string * string * seq<System.Security.Claims.Claim> * Nullable<DateTime> * Nullable<DateTime> * Nullable<DateTime> -> System.IdentityModel.Tokens.Jwt.JwtPayload'
  - lang: vb
    values:
    - value: Public Sub New (issuer As String, audience As String, claims As IEnumerable(Of Claim), notBefore As Nullable(Of DateTime), expires As Nullable(Of DateTime), issuedAt As Nullable(Of DateTime))
  monikers:
  - msal-web-dotnet-latest
  summary: Initializes a new instance of the <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtPayload"></xref> class with claims added for each parameter specified. Default string comparer <xref data-throw-if-not-resolved="true" uid="System.StringComparer.Ordinal"></xref>.
  remarks: "<p>Comparison is set to <xref data-throw-if-not-resolved=\"true\" uid=\"System.StringComparer.Ordinal\"></xref></p><p>The 4 parameters: 'issuer', 'audience', 'notBefore', 'expires' take precedence over <xref data-throw-if-not-resolved=\"true\" uid=\"System.Security.Claims.Claim\"></xref>(s) in 'claims'. The values will be overridden.</p>"
  metadata: {}
- parameters:
  - namesWithMoniker:
    - value: issuer
    description: If this value is not null, a { iss, 'issuer' } claim will be added, overwriting any 'iss' claim in 'claims' and 'claimCollection' if present.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: audience
    description: If this value is not null, a { aud, 'audience' } claim will be added, appending to any 'aud' claims in 'claims' or 'claimCollection' if present.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: claims
    description: If this value is not null then for each <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim"></xref> a { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Security.Claims.Claim?alt=System.Security.Claims.Claim&text=Claim" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: claimsCollection
    description: >-
      If both <code data-dev-comment-type="paramref">claims</code> and <code data-dev-comment-type="paramref">claimsCollection</code> are not null then the values in claims will be combined with the values in claimsCollection. The values found in claimCollection take precedence over those found in claims, so any duplicate
                  values will be overridden.
    type: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: notBefore
    description: If notbefore.HasValue a { nbf, 'value' } claim is added, overwriting any 'nbf' claim in 'claims' and 'claimcollection' if present.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: expires
    description: If expires.HasValue a { exp, 'value' } claim is added, overwriting any 'exp' claim in 'claims' and 'claimcollection' if present.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: issuedAt
    description: If issuedAt.HasValue is 'true' a { iat, 'value' } claim is added, overwriting any 'iat' claim in 'claims' and 'claimcollection' if present.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTime?alt=System.DateTime&text=DateTime" data-throw-if-not-resolved="True"/>&gt;
  exceptions:
  - description: If 'expires' &lt;= 'notbefore'.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  type: constructor
  uid: System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})
  commentId: M:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})
  name: JwtPayload(String, String, IEnumerable<Claim>, IDictionary<String,Object>, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>)
  fullName: System.IdentityModel.Tokens.Jwt.JwtPayload.JwtPayload(String, String, IEnumerable<Claim>, IDictionary<String,Object>, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>)
  nameWithType: JwtPayload.JwtPayload(String, String, IEnumerable<Claim>, IDictionary<String,Object>, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public JwtPayload (string issuer, string audience, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, System.Collections.Generic.IDictionary<string,object> claimsCollection, DateTime? notBefore, DateTime? expires, DateTime? issuedAt);
  - lang: fsharp
    values:
    - value: 'new System.IdentityModel.Tokens.Jwt.JwtPayload : string * string * seq<System.Security.Claims.Claim> * System.Collections.Generic.IDictionary<string, obj> * Nullable<DateTime> * Nullable<DateTime> * Nullable<DateTime> -> System.IdentityModel.Tokens.Jwt.JwtPayload'
  - lang: vb
    values:
    - value: Public Sub New (issuer As String, audience As String, claims As IEnumerable(Of Claim), claimsCollection As IDictionary(Of String, Object), notBefore As Nullable(Of DateTime), expires As Nullable(Of DateTime), issuedAt As Nullable(Of DateTime))
  monikers:
  - msal-web-dotnet-latest
  summary: Initializes a new instance of the <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtPayload"></xref> class with claims added for each parameter specified. Default string comparer <xref data-throw-if-not-resolved="true" uid="System.StringComparer.Ordinal"></xref>.
  remarks: "<p>Comparison is set to <xref data-throw-if-not-resolved=\"true\" uid=\"System.StringComparer.Ordinal\"></xref></p><p>The 4 parameters: 'issuer', 'audience', 'notBefore', 'expires' take precedence over <xref data-throw-if-not-resolved=\"true\" uid=\"System.Security.Claims.Claim\"></xref>(s) in 'claims' and 'claimcollection'. The values will be overridden.</p>"
  metadata: {}
uid: System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor*
commentId: Overload:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor
namespace: System.IdentityModel.Tokens.Jwt
name: JwtPayload
fullName: System.IdentityModel.Tokens.Jwt.JwtPayload.JwtPayload
nameWithType: JwtPayload.JwtPayload
assembliesWithMoniker:
- value: System.IdentityModel.Tokens.Jwt.dll
packagesWithMoniker:
- value: System.IdentityModel.Tokens.Jwt v6.25.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-web-dotnet-latest
metadata:
  api_name:
  - System.IdentityModel.Tokens.Jwt.JwtPayload..ctor
  api_location:
  - System.IdentityModel.Tokens.Jwt.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor
  - System::IdentityModel::Tokens::Jwt::JwtPayload::#ctor
  - '#ctor'
  - JwtPayload.#ctor
  - JwtPayload::#ctor
  helpviewer_keywords:
  - JwtPayload class [.NET], constructors
  - JwtPayload() class [.NET], constructors
  - JwtPayload(IEnumerable<Claim>) class [.NET], constructors
  - JwtPayload(String, String, IEnumerable<Claim>, Nullable<DateTime>, Nullable<DateTime>) class [.NET], constructors
  - JwtPayload(String, String, IEnumerable<Claim>, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>) class [.NET], constructors
  - JwtPayload(String, String, IEnumerable<Claim>, IDictionary<String,Object>, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>) class [.NET], constructors
  monikers:
  - msal-web-dotnet-latest
