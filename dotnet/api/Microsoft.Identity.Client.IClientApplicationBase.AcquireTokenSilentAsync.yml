### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.Identity.Client.AuthenticationResult?alt=Microsoft.Identity.Client.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="True"/>&gt;
    description: An <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AuthenticationResult"></xref> containing the requested token
  parameters:
  - namesWithMoniker:
    - value: scopes
    description: Scopes requested to access a protected API
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: account
    description: Account for which the token is requested. <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.IAccount"></xref>
    type: <xref href="Microsoft.Identity.Client.IAccount?alt=Microsoft.Identity.Client.IAccount&text=IAccount" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: >-
      can be thrown in the case where an interaction is required with the end user of the application,
                  for instance so that the user consents, or re-signs-in (for instance if the password expired), or performs two factor authentication
    type: <xref href="Microsoft.Identity.Client.MsalUiRequiredException?alt=Microsoft.Identity.Client.MsalUiRequiredException&text=MsalUiRequiredException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilentAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)
  commentId: M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilentAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)
  name: AcquireTokenSilentAsync(IEnumerable<String>, IAccount)
  fullName: Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilentAsync(IEnumerable<String>, IAccount)
  nameWithType: IClientApplicationBase.AcquireTokenSilentAsync(IEnumerable<String>, IAccount)
  attributesWithMoniker:
  - value: System.ObsoleteAttribute
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: >-
        [System.Obsolete("Use AcquireTokenSilent instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)]

        public System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult> AcquireTokenSilentAsync (System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.IAccount account);
  - lang: fsharp
    values:
    - value: >-
        [<System.Obsolete("Use AcquireTokenSilent instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)>]

        abstract member AcquireTokenSilentAsync : seq<string> * Microsoft.Identity.Client.IAccount -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>
  - lang: vb
    values:
    - value: Public Function AcquireTokenSilentAsync (scopes As IEnumerable(Of String), account As IAccount) As Task(Of AuthenticationResult)
  monikers:
  - msal-dotnet-latest
  obsoleteMessagesWithMoniker:
  - value: 'Use AcquireTokenSilent instead. See https://aka.ms/msal-net-3-breaking-changes. '
  summary: Attempts to acquire an access token for the <code data-dev-comment-type="paramref">account</code> from the user token cache.
  remarks: <p>The access token is considered a match if it contains <strong>at least</strong> all the requested scopes. This means that an access token with more scopes than requested could be returned as well. If the access token is expired or close to expiration (within 5 minute window), then the cached refresh token (if available) is used to acquire a new access token by making a silent network call. See https://aka.ms/msal-net-acuiretokensilent for more details</p>
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.Identity.Client.AuthenticationResult?alt=Microsoft.Identity.Client.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="True"/>&gt;
    description: An <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AuthenticationResult"></xref> containing the requested token
  parameters:
  - namesWithMoniker:
    - value: scopes
    description: Scopes requested to access a protected API
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: account
    description: Account for which the token is requested. <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.IAccount"></xref>
    type: <xref href="Microsoft.Identity.Client.IAccount?alt=Microsoft.Identity.Client.IAccount&text=IAccount" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: authority
    description: >-
      Specific authority for which the token is requested. Passing a different value than configured in the application constructor
                  narrows down the selection of tenants for which to get a tenant, but does not change the configured value
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: forceRefresh
    description: >-
      If <code data-dev-comment-type="c">true</code>, the will ignore the access token in the cache and attempt to acquire new access token
                  using the refresh token for the account if this one is available. This can be useful in the case when the application developer wants to make
                  sure that conditional access policies are applies immediately, rather than after the expiration of the access token
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: >-
      can be thrown in the case where an interaction is required with the end user of the application,
                  for instance, if no refresh token was in the cache, or the user needs to consents, or re-sign-in (for instance if the password expired),
                  or performs two factor authentication
    type: <xref href="Microsoft.Identity.Client.MsalUiRequiredException?alt=Microsoft.Identity.Client.MsalUiRequiredException&text=MsalUiRequiredException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilentAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount,System.String,System.Boolean)
  commentId: M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilentAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount,System.String,System.Boolean)
  name: AcquireTokenSilentAsync(IEnumerable<String>, IAccount, String, Boolean)
  fullName: Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilentAsync(IEnumerable<String>, IAccount, String, Boolean)
  nameWithType: IClientApplicationBase.AcquireTokenSilentAsync(IEnumerable<String>, IAccount, String, Boolean)
  attributesWithMoniker:
  - value: System.ObsoleteAttribute
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: >-
        [System.Obsolete("Use AcquireTokenSilent instead.See https://aka.ms/msal-net-3-breaking-changes. ", true)]

        public System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult> AcquireTokenSilentAsync (System.Collections.Generic.IEnumerable<string> scopes, Microsoft.Identity.Client.IAccount account, string authority, bool forceRefresh);
  - lang: fsharp
    values:
    - value: >-
        [<System.Obsolete("Use AcquireTokenSilent instead.See https://aka.ms/msal-net-3-breaking-changes. ", true)>]

        abstract member AcquireTokenSilentAsync : seq<string> * Microsoft.Identity.Client.IAccount * string * bool -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult>
  - lang: vb
    values:
    - value: Public Function AcquireTokenSilentAsync (scopes As IEnumerable(Of String), account As IAccount, authority As String, forceRefresh As Boolean) As Task(Of AuthenticationResult)
  monikers:
  - msal-dotnet-latest
  obsoleteMessagesWithMoniker:
  - value: 'Use AcquireTokenSilent instead.See https://aka.ms/msal-net-3-breaking-changes. '
  summary: Attempts to acquire and access token for the <code data-dev-comment-type="paramref">account</code> from the user token cache, with advanced parameters making a network call.
  remarks: <p>The access token is considered a match if it contains <strong>at least</strong> all the requested scopes. This means that an access token with more scopes than requested could be returned as well. If the access token is expired or close to expiration (within 5 minute window), then the cached refresh token (if available) is used to acquire a new access token by making a silent network call. See https://aka.ms/msal-net-acquiretokensilent for more details</p>
  metadata: {}
uid: Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilentAsync*
commentId: Overload:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilentAsync
namespace: Microsoft.Identity.Client
name: AcquireTokenSilentAsync
fullName: Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilentAsync
nameWithType: IClientApplicationBase.AcquireTokenSilentAsync
assembliesWithMoniker:
- value: Microsoft.Identity.Client.dll
packagesWithMoniker:
- value: Microsoft.Identity.Client v4.49.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilentAsync
  api_location:
  - Microsoft.Identity.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilentAsync
  - Microsoft::Identity::Client::IClientApplicationBase::AcquireTokenSilentAsync
  - AcquireTokenSilentAsync
  - IClientApplicationBase.AcquireTokenSilentAsync
  - IClientApplicationBase::AcquireTokenSilentAsync
  helpviewer_keywords:
  - IClientApplicationBase.AcquireTokenSilentAsync method [.NET]
  - AcquireTokenSilentAsync method [.NET], interface IClientApplicationBase
  - IClientApplicationBase.AcquireTokenSilentAsync(IEnumerable<String>, IAccount) method [.NET]
  - AcquireTokenSilentAsync(IEnumerable<String>, IAccount) method [.NET], interface IClientApplicationBase
  - IClientApplicationBase.AcquireTokenSilentAsync(IEnumerable<String>, IAccount, String, Boolean) method [.NET]
  - AcquireTokenSilentAsync(IEnumerable<String>, IAccount, String, Boolean) method [.NET], interface IClientApplicationBase
  monikers:
  - msal-dotnet-latest
