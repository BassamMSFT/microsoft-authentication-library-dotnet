### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A JWE in compact serialization format.
  parameters:
  - namesWithMoniker:
    - value: payload
    description: A string containing JSON which represents the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: signingCredentials
    description: Defines the security key and algorithm that will be used to sign the JWT.
    type: <xref href="Microsoft.IdentityModel.Tokens.SigningCredentials?alt=Microsoft.IdentityModel.Tokens.SigningCredentials&text=SigningCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Defines the security key and algorithm that will be used to encrypt the JWT.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: compressionAlgorithm
    description: Defines the compression algorithm that will be used to compress the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: additionalHeaderClaims
    description: Defines the dictionary containing any custom header claims that need to be added to the outer JWT token header.
    type: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: additionalInnerHeaderClaims
    description: Defines the dictionary containing any custom header claims that need to be added to the inner JWT token header.
    type: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>&gt;
  exceptions:
  - description: if <code data-dev-comment-type="paramref">additionalHeaderClaims</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: >-
      if <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Alg"></xref>, <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Kid"></xref><xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.X5t"></xref>, <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Enc"></xref>, and/or <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Zip"></xref>
                  are present inside of <code data-dev-comment-type="paramref">additionalHeaderClaims</code>.
    type: <xref href="Microsoft.IdentityModel.Tokens.SecurityTokenException?alt=Microsoft.IdentityModel.Tokens.SecurityTokenException&text=SecurityTokenException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})
  name: CreateToken(String, SigningCredentials, EncryptingCredentials, String, IDictionary<String,Object>, IDictionary<String,Object>)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials, String, IDictionary<String,Object>, IDictionary<String,Object>)
  nameWithType: JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials, String, IDictionary<String,Object>, IDictionary<String,Object>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateToken (string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string compressionAlgorithm, System.Collections.Generic.IDictionary<string,object> additionalHeaderClaims, System.Collections.Generic.IDictionary<string,object> additionalInnerHeaderClaims);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials * string * System.Collections.Generic.IDictionary<string, obj> * System.Collections.Generic.IDictionary<string, obj> -> string

        override this.CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials * string * System.Collections.Generic.IDictionary<string, obj> * System.Collections.Generic.IDictionary<string, obj> -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateToken (payload As String, signingCredentials As SigningCredentials, encryptingCredentials As EncryptingCredentials, compressionAlgorithm As String, additionalHeaderClaims As IDictionary(Of String, Object), additionalInnerHeaderClaims As IDictionary(Of String, Object)) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWE (Json Web Encryption).
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A JWE in compact serialization format.
  parameters:
  - namesWithMoniker:
    - value: payload
    description: A string containing JSON which represents the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: signingCredentials
    description: Defines the security key and algorithm that will be used to sign the JWT.
    type: <xref href="Microsoft.IdentityModel.Tokens.SigningCredentials?alt=Microsoft.IdentityModel.Tokens.SigningCredentials&text=SigningCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Defines the security key and algorithm that will be used to encrypt the JWT.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: compressionAlgorithm
    description: Defines the compression algorithm that will be used to compress the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: additionalHeaderClaims
    description: Defines the dictionary containing any custom header claims that need to be added to the outer JWT token header.
    type: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>&gt;
  exceptions:
  - description: if <code data-dev-comment-type="paramref">additionalHeaderClaims</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: >-
      if <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Alg"></xref>, <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Kid"></xref><xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.X5t"></xref>, <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Enc"></xref>, and/or <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Zip"></xref>
                  are present inside of <code data-dev-comment-type="paramref">additionalHeaderClaims</code>.
    type: <xref href="Microsoft.IdentityModel.Tokens.SecurityTokenException?alt=Microsoft.IdentityModel.Tokens.SecurityTokenException&text=SecurityTokenException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  name: CreateToken(String, SigningCredentials, EncryptingCredentials, String, IDictionary<String,Object>)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials, String, IDictionary<String,Object>)
  nameWithType: JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials, String, IDictionary<String,Object>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateToken (string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string compressionAlgorithm, System.Collections.Generic.IDictionary<string,object> additionalHeaderClaims);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials * string * System.Collections.Generic.IDictionary<string, obj> -> string

        override this.CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials * string * System.Collections.Generic.IDictionary<string, obj> -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateToken (payload As String, signingCredentials As SigningCredentials, encryptingCredentials As EncryptingCredentials, compressionAlgorithm As String, additionalHeaderClaims As IDictionary(Of String, Object)) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWE (Json Web Encryption).
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A JWE in compact serialization format.
  parameters:
  - namesWithMoniker:
    - value: payload
    description: A string containing JSON which represents the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: signingCredentials
    description: Defines the security key and algorithm that will be used to sign the JWT.
    type: <xref href="Microsoft.IdentityModel.Tokens.SigningCredentials?alt=Microsoft.IdentityModel.Tokens.SigningCredentials&text=SigningCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Defines the security key and algorithm that will be used to encrypt the JWT.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: compressionAlgorithm
    description: Defines the compression algorithm that will be used to compress the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: if <code data-dev-comment-type="paramref">compressionAlgorithm</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String)
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String)
  name: CreateToken(String, SigningCredentials, EncryptingCredentials, String)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials, String)
  nameWithType: JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials, String)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateToken (string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string compressionAlgorithm);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials * string -> string

        override this.CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials * string -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateToken (payload As String, signingCredentials As SigningCredentials, encryptingCredentials As EncryptingCredentials, compressionAlgorithm As String) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWE (Json Web Encryption).
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A JWE in compact serialization format.
  parameters:
  - namesWithMoniker:
    - value: payload
    description: A string containing JSON which represents the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: signingCredentials
    description: Defines the security key and algorithm that will be used to sign the JWT.
    type: <xref href="Microsoft.IdentityModel.Tokens.SigningCredentials?alt=Microsoft.IdentityModel.Tokens.SigningCredentials&text=SigningCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Defines the security key and algorithm that will be used to encrypt the JWT.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: additionalHeaderClaims
    description: Defines the dictionary containing any custom header claims that need to be added to the outer JWT token header.
    type: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>&gt;
  exceptions:
  - description: if <code data-dev-comment-type="paramref">additionalHeaderClaims</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: >-
      if <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Alg"></xref>, <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Kid"></xref><xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.X5t"></xref>, <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Enc"></xref>, and/or <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Zip"></xref>
                  are present inside of <code data-dev-comment-type="paramref">additionalHeaderClaims</code>.
    type: <xref href="Microsoft.IdentityModel.Tokens.SecurityTokenException?alt=Microsoft.IdentityModel.Tokens.SecurityTokenException&text=SecurityTokenException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})
  name: CreateToken(String, SigningCredentials, EncryptingCredentials, IDictionary<String,Object>)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials, IDictionary<String,Object>)
  nameWithType: JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials, IDictionary<String,Object>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateToken (string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, System.Collections.Generic.IDictionary<string,object> additionalHeaderClaims);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials * System.Collections.Generic.IDictionary<string, obj> -> string

        override this.CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials * System.Collections.Generic.IDictionary<string, obj> -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateToken (payload As String, signingCredentials As SigningCredentials, encryptingCredentials As EncryptingCredentials, additionalHeaderClaims As IDictionary(Of String, Object)) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWE (Json Web Encryption).
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A JWE in compact serialization format.
  parameters:
  - namesWithMoniker:
    - value: payload
    description: A string containing JSON which represents the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: signingCredentials
    description: Defines the security key and algorithm that will be used to sign the JWT.
    type: <xref href="Microsoft.IdentityModel.Tokens.SigningCredentials?alt=Microsoft.IdentityModel.Tokens.SigningCredentials&text=SigningCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Defines the security key and algorithm that will be used to encrypt the JWT.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: if <code data-dev-comment-type="paramref">encryptingCredentials</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials)
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials)
  name: CreateToken(String, SigningCredentials, EncryptingCredentials)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials)
  nameWithType: JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateToken (string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials -> string

        override this.CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateToken (payload As String, signingCredentials As SigningCredentials, encryptingCredentials As EncryptingCredentials) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWE (Json Web Encryption).
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A JWE in compact serialization format.
  parameters:
  - namesWithMoniker:
    - value: payload
    description: A string containing JSON which represents the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Defines the security key and algorithm that will be used to encrypt the JWT.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: compressionAlgorithm
    description: Defines the compression algorithm that will be used to compress the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String)
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String)
  name: CreateToken(String, EncryptingCredentials, String)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(String, EncryptingCredentials, String)
  nameWithType: JsonWebTokenHandler.CreateToken(String, EncryptingCredentials, String)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateToken (string payload, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string compressionAlgorithm);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateToken : string * Microsoft.IdentityModel.Tokens.EncryptingCredentials * string -> string

        override this.CreateToken : string * Microsoft.IdentityModel.Tokens.EncryptingCredentials * string -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateToken (payload As String, encryptingCredentials As EncryptingCredentials, compressionAlgorithm As String) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWE (Json Web Encryption).
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A JWS in Compact Serialization Format.
  parameters:
  - namesWithMoniker:
    - value: payload
    description: A string containing JSON which represents the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: signingCredentials
    description: Defines the security key and algorithm that will be used to sign the JWS.
    type: <xref href="Microsoft.IdentityModel.Tokens.SigningCredentials?alt=Microsoft.IdentityModel.Tokens.SigningCredentials&text=SigningCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: additionalHeaderClaims
    description: Defines the dictionary containing any custom header claims that need to be added to the JWT token header.
    type: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>&gt;
  exceptions:
  - description: if <code data-dev-comment-type="paramref">additionalHeaderClaims</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: >-
      if <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Alg"></xref>, <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Kid"></xref><xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.X5t"></xref>, <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Enc"></xref>, and/or <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Zip"></xref>
                  are present inside of <code data-dev-comment-type="paramref">additionalHeaderClaims</code>.
    type: <xref href="Microsoft.IdentityModel.Tokens.SecurityTokenException?alt=Microsoft.IdentityModel.Tokens.SecurityTokenException&text=SecurityTokenException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})
  name: CreateToken(String, SigningCredentials, IDictionary<String,Object>)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(String, SigningCredentials, IDictionary<String,Object>)
  nameWithType: JsonWebTokenHandler.CreateToken(String, SigningCredentials, IDictionary<String,Object>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateToken (string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, System.Collections.Generic.IDictionary<string,object> additionalHeaderClaims);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials * System.Collections.Generic.IDictionary<string, obj> -> string

        override this.CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials * System.Collections.Generic.IDictionary<string, obj> -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateToken (payload As String, signingCredentials As SigningCredentials, additionalHeaderClaims As IDictionary(Of String, Object)) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWS (Json Web Signature).
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A JWS in Compact Serialization Format.
  parameters:
  - namesWithMoniker:
    - value: payload
    description: A string containing JSON which represents the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: additionalHeaderClaims
    description: Defines the dictionary containing any custom header claims that need to be added to the JWT token header.
    type: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>&gt;
  exceptions:
  - description: if <code data-dev-comment-type="paramref">additionalHeaderClaims</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  name: CreateToken(String, IDictionary<String,Object>)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(String, IDictionary<String,Object>)
  nameWithType: JsonWebTokenHandler.CreateToken(String, IDictionary<String,Object>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateToken (string payload, System.Collections.Generic.IDictionary<string,object> additionalHeaderClaims);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateToken : string * System.Collections.Generic.IDictionary<string, obj> -> string

        override this.CreateToken : string * System.Collections.Generic.IDictionary<string, obj> -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateToken (payload As String, additionalHeaderClaims As IDictionary(Of String, Object)) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates an unsigned JWS (Json Web Signature).
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A JWS in Compact Serialization Format.
  parameters:
  - namesWithMoniker:
    - value: payload
    description: A string containing JSON which represents the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: signingCredentials
    description: Defines the security key and algorithm that will be used to sign the JWS.
    type: <xref href="Microsoft.IdentityModel.Tokens.SigningCredentials?alt=Microsoft.IdentityModel.Tokens.SigningCredentials&text=SigningCredentials" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: if <code data-dev-comment-type="paramref">signingCredentials</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials)
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials)
  name: CreateToken(String, SigningCredentials)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(String, SigningCredentials)
  nameWithType: JsonWebTokenHandler.CreateToken(String, SigningCredentials)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateToken (string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials -> string

        override this.CreateToken : string * Microsoft.IdentityModel.Tokens.SigningCredentials -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateToken (payload As String, signingCredentials As SigningCredentials) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWS (Json Web Signature).
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A JWE in compact serialization format.
  parameters:
  - namesWithMoniker:
    - value: payload
    description: A string containing JSON which represents the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Defines the security key and algorithm that will be used to encrypt the JWT.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials)
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials)
  name: CreateToken(String, EncryptingCredentials)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(String, EncryptingCredentials)
  nameWithType: JsonWebTokenHandler.CreateToken(String, EncryptingCredentials)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateToken (string payload, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateToken : string * Microsoft.IdentityModel.Tokens.EncryptingCredentials -> string

        override this.CreateToken : string * Microsoft.IdentityModel.Tokens.EncryptingCredentials -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateToken (payload As String, encryptingCredentials As EncryptingCredentials) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWE (Json Web Encryption).
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A JWS in Compact Serialization Format.
  parameters:
  - namesWithMoniker:
    - value: payload
    description: A string containing JSON which represents the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: if <code data-dev-comment-type="paramref">payload</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String)
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String)
  name: CreateToken(String)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(String)
  nameWithType: JsonWebTokenHandler.CreateToken(String)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateToken (string payload);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateToken : string -> string

        override this.CreateToken : string -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateToken (payload As String) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates an unsigned JWS (Json Web Signature).
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A JWS in Compact Serialization Format.
  parameters:
  - namesWithMoniker:
    - value: tokenDescriptor
    description: A <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor"></xref> that contains details of contents of the token.
    type: <xref href="Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor?alt=Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor&text=SecurityTokenDescriptor" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor)
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor)
  name: CreateToken(SecurityTokenDescriptor)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(SecurityTokenDescriptor)
  nameWithType: JsonWebTokenHandler.CreateToken(SecurityTokenDescriptor)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateToken (Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateToken : Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor -> string

        override this.CreateToken : Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateToken (tokenDescriptor As SecurityTokenDescriptor) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWS(Json Web Signature).
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
    description: A JWS in Compact Serialization Format.
  parameters:
  - namesWithMoniker:
    - value: payload
    description: A string containing JSON which represents the JWT token payload.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Defines the security key and algorithm that will be used to encrypt the JWT.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: additionalHeaderClaims
    description: Defines the dictionary containing any custom header claims that need to be added to the outer JWT token header.
    type: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>&gt;
  exceptions:
  - description: if <code data-dev-comment-type="paramref">additionalHeaderClaims</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: >-
      if <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Alg"></xref>, <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Kid"></xref><xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.X5t"></xref>, <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Enc"></xref>, and/or <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Zip"></xref>
                  are present inside of <code data-dev-comment-type="paramref">additionalHeaderClaims</code>.
    type: <xref href="Microsoft.IdentityModel.Tokens.SecurityTokenException?alt=Microsoft.IdentityModel.Tokens.SecurityTokenException&text=SecurityTokenException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})
  name: CreateToken(String, EncryptingCredentials, IDictionary<String,Object>)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(String, EncryptingCredentials, IDictionary<String,Object>)
  nameWithType: JsonWebTokenHandler.CreateToken(String, EncryptingCredentials, IDictionary<String,Object>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual string CreateToken (string payload, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, System.Collections.Generic.IDictionary<string,object> additionalHeaderClaims);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateToken : string * Microsoft.IdentityModel.Tokens.EncryptingCredentials * System.Collections.Generic.IDictionary<string, obj> -> string

        override this.CreateToken : string * Microsoft.IdentityModel.Tokens.EncryptingCredentials * System.Collections.Generic.IDictionary<string, obj> -> string
  - lang: vb
    values:
    - value: Public Overridable Function CreateToken (payload As String, encryptingCredentials As EncryptingCredentials, additionalHeaderClaims As IDictionary(Of String, Object)) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a JWE (Json Web Encryption).
  metadata: {}
uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken*
commentId: Overload:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken
namespace: Microsoft.IdentityModel.JsonWebTokens
name: CreateToken
fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken
nameWithType: JsonWebTokenHandler.CreateToken
assembliesWithMoniker:
- value: Microsoft.IdentityModel.JsonWebTokens.dll
packagesWithMoniker:
- value: Microsoft.IdentityModel.JsonWebTokens v6.25.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-web-dotnet-latest
metadata:
  api_name:
  - Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken
  api_location:
  - Microsoft.IdentityModel.JsonWebTokens.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken
  - Microsoft::IdentityModel::JsonWebTokens::JsonWebTokenHandler::CreateToken
  - CreateToken
  - JsonWebTokenHandler.CreateToken
  - JsonWebTokenHandler::CreateToken
  helpviewer_keywords:
  - JsonWebTokenHandler.CreateToken method [.NET]
  - CreateToken method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials, String, IDictionary<String,Object>, IDictionary<String,Object>) method [.NET]
  - CreateToken(String, SigningCredentials, EncryptingCredentials, String, IDictionary<String,Object>, IDictionary<String,Object>) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials, String, IDictionary<String,Object>) method [.NET]
  - CreateToken(String, SigningCredentials, EncryptingCredentials, String, IDictionary<String,Object>) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials, String) method [.NET]
  - CreateToken(String, SigningCredentials, EncryptingCredentials, String) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials, IDictionary<String,Object>) method [.NET]
  - CreateToken(String, SigningCredentials, EncryptingCredentials, IDictionary<String,Object>) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.CreateToken(String, SigningCredentials, EncryptingCredentials) method [.NET]
  - CreateToken(String, SigningCredentials, EncryptingCredentials) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.CreateToken(String, EncryptingCredentials, String) method [.NET]
  - CreateToken(String, EncryptingCredentials, String) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.CreateToken(String, SigningCredentials, IDictionary<String,Object>) method [.NET]
  - CreateToken(String, SigningCredentials, IDictionary<String,Object>) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.CreateToken(String, IDictionary<String,Object>) method [.NET]
  - CreateToken(String, IDictionary<String,Object>) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.CreateToken(String, SigningCredentials) method [.NET]
  - CreateToken(String, SigningCredentials) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.CreateToken(String, EncryptingCredentials) method [.NET]
  - CreateToken(String, EncryptingCredentials) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.CreateToken(String) method [.NET]
  - CreateToken(String) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.CreateToken(SecurityTokenDescriptor) method [.NET]
  - CreateToken(SecurityTokenDescriptor) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.CreateToken(String, EncryptingCredentials, IDictionary<String,Object>) method [.NET]
  - CreateToken(String, EncryptingCredentials, IDictionary<String,Object>) method [.NET], class JsonWebTokenHandler
  monikers:
  - msal-web-dotnet-latest
