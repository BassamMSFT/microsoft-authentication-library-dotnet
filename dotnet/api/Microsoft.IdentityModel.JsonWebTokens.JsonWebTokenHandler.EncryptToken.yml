### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: innerJwt
    description: A 'JSON Web Token' (JWT) in JWS Compact Serialization Format.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Defines the security key and algorithm that will be used to encrypt the <code data-dev-comment-type="paramref">innerJwt</code>.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: algorithm
    description: Defines the compression algorithm that will be used to compress the <code data-dev-comment-type="paramref">innerJwt</code>
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: additionalHeaderClaims
    description: Defines the dictionary containing any custom header claims that need to be added to the outer JWT token header.
    type: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>&gt;
  exceptions:
  - description: if <code data-dev-comment-type="paramref">additionalHeaderClaims</code> is null or empty.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: if both <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.EncryptingCredentials.CryptoProviderFactory"></xref> and <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key"></xref>.<xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.CryptoProviderFactory"></xref> are null.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: 'if not using one of the supported content encryption key (CEK) algorithms: 128, 384 or 512 AesCbcHmac (this applies in the case of key wrap only, not direct encryption).'
    type: <xref href="Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException?alt=Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException&text=SecurityTokenEncryptionFailedException" data-throw-if-not-resolved="True"/>
  - description: if compression using 'algorithm' fails.
    type: <xref href="Microsoft.IdentityModel.Tokens.SecurityTokenCompressionFailedException?alt=Microsoft.IdentityModel.Tokens.SecurityTokenCompressionFailedException&text=SecurityTokenCompressionFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})
  name: EncryptToken(String, EncryptingCredentials, String, IDictionary<String,Object>)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(String, EncryptingCredentials, String, IDictionary<String,Object>)
  nameWithType: JsonWebTokenHandler.EncryptToken(String, EncryptingCredentials, String, IDictionary<String,Object>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public string EncryptToken (string innerJwt, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string algorithm, System.Collections.Generic.IDictionary<string,object> additionalHeaderClaims);
  - lang: fsharp
    values:
    - value: 'member this.EncryptToken : string * Microsoft.IdentityModel.Tokens.EncryptingCredentials * string * System.Collections.Generic.IDictionary<string, obj> -> string'
  - lang: vb
    values:
    - value: Public Function EncryptToken (innerJwt As String, encryptingCredentials As EncryptingCredentials, algorithm As String, additionalHeaderClaims As IDictionary(Of String, Object)) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Encrypts a JWS.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: innerJwt
    description: A 'JSON Web Token' (JWT) in JWS Compact Serialization Format.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Defines the security key and algorithm that will be used to encrypt the <code data-dev-comment-type="paramref">innerJwt</code>.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: algorithm
    description: Defines the compression algorithm that will be used to compress the 'innerJwt'.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: if <code data-dev-comment-type="paramref">algorithm</code> is null or empty.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: if both <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.EncryptingCredentials.CryptoProviderFactory"></xref> and <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key"></xref>.<xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.CryptoProviderFactory"></xref> are null.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: 'if not using one of the supported content encryption key (CEK) algorithms: 128, 384 or 512 AesCbcHmac (this applies in the case of key wrap only, not direct encryption).'
    type: <xref href="Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException?alt=Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException&text=SecurityTokenEncryptionFailedException" data-throw-if-not-resolved="True"/>
  - description: if compression using <code data-dev-comment-type="paramref">algorithm</code> fails.
    type: <xref href="Microsoft.IdentityModel.Tokens.SecurityTokenCompressionFailedException?alt=Microsoft.IdentityModel.Tokens.SecurityTokenCompressionFailedException&text=SecurityTokenCompressionFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String)
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.String)
  name: EncryptToken(String, EncryptingCredentials, String)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(String, EncryptingCredentials, String)
  nameWithType: JsonWebTokenHandler.EncryptToken(String, EncryptingCredentials, String)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public string EncryptToken (string innerJwt, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string algorithm);
  - lang: fsharp
    values:
    - value: 'member this.EncryptToken : string * Microsoft.IdentityModel.Tokens.EncryptingCredentials * string -> string'
  - lang: vb
    values:
    - value: Public Function EncryptToken (innerJwt As String, encryptingCredentials As EncryptingCredentials, algorithm As String) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Encrypts a JWS.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: innerJwt
    description: A 'JSON Web Token' (JWT) in JWS Compact Serialization Format.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Defines the security key and algorithm that will be used to encrypt the <code data-dev-comment-type="paramref">innerJwt</code>.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: additionalHeaderClaims
    description: Defines the dictionary containing any custom header claims that need to be added to the outer JWT token header.
    type: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>&gt;
  exceptions:
  - description: if <code data-dev-comment-type="paramref">additionalHeaderClaims</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: if both <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.EncryptingCredentials.CryptoProviderFactory"></xref> and <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key"></xref>.<xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.CryptoProviderFactory"></xref> are null.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: 'if not using one of the supported content encryption key (CEK) algorithms: 128, 384 or 512 AesCbcHmac (this applies in the case of key wrap only, not direct encryption).'
    type: <xref href="Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException?alt=Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException&text=SecurityTokenEncryptionFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials,System.Collections.Generic.IDictionary{System.String,System.Object})
  name: EncryptToken(String, EncryptingCredentials, IDictionary<String,Object>)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(String, EncryptingCredentials, IDictionary<String,Object>)
  nameWithType: JsonWebTokenHandler.EncryptToken(String, EncryptingCredentials, IDictionary<String,Object>)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public string EncryptToken (string innerJwt, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, System.Collections.Generic.IDictionary<string,object> additionalHeaderClaims);
  - lang: fsharp
    values:
    - value: 'member this.EncryptToken : string * Microsoft.IdentityModel.Tokens.EncryptingCredentials * System.Collections.Generic.IDictionary<string, obj> -> string'
  - lang: vb
    values:
    - value: Public Function EncryptToken (innerJwt As String, encryptingCredentials As EncryptingCredentials, additionalHeaderClaims As IDictionary(Of String, Object)) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Encrypts a JWS.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: innerJwt
    description: A 'JSON Web Token' (JWT) in JWS Compact Serialization Format.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: encryptingCredentials
    description: Defines the security key and algorithm that will be used to encrypt the <code data-dev-comment-type="paramref">innerJwt</code>.
    type: <xref href="Microsoft.IdentityModel.Tokens.EncryptingCredentials?alt=Microsoft.IdentityModel.Tokens.EncryptingCredentials&text=EncryptingCredentials" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: if <code data-dev-comment-type="paramref">encryptingCredentials</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: if both <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.EncryptingCredentials.CryptoProviderFactory"></xref> and <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.EncryptingCredentials.Key"></xref>.<xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.CryptoProviderFactory"></xref> are null.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: 'if not using one of the supported content encryption key (CEK) algorithms: 128, 384 or 512 AesCbcHmac (this applies in the case of key wrap only, not direct encryption).'
    type: <xref href="Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException?alt=Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException&text=SecurityTokenEncryptionFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials)
  commentId: M:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(System.String,Microsoft.IdentityModel.Tokens.EncryptingCredentials)
  name: EncryptToken(String, EncryptingCredentials)
  fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(String, EncryptingCredentials)
  nameWithType: JsonWebTokenHandler.EncryptToken(String, EncryptingCredentials)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public string EncryptToken (string innerJwt, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);
  - lang: fsharp
    values:
    - value: 'member this.EncryptToken : string * Microsoft.IdentityModel.Tokens.EncryptingCredentials -> string'
  - lang: vb
    values:
    - value: Public Function EncryptToken (innerJwt As String, encryptingCredentials As EncryptingCredentials) As String
  monikers:
  - msal-web-dotnet-latest
  summary: Encrypts a JWS.
  metadata: {}
uid: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken*
commentId: Overload:Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken
namespace: Microsoft.IdentityModel.JsonWebTokens
name: EncryptToken
fullName: Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken
nameWithType: JsonWebTokenHandler.EncryptToken
assembliesWithMoniker:
- value: Microsoft.IdentityModel.JsonWebTokens.dll
packagesWithMoniker:
- value: Microsoft.IdentityModel.JsonWebTokens v6.25.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-web-dotnet-latest
metadata:
  api_name:
  - Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken
  api_location:
  - Microsoft.IdentityModel.JsonWebTokens.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken
  - Microsoft::IdentityModel::JsonWebTokens::JsonWebTokenHandler::EncryptToken
  - EncryptToken
  - JsonWebTokenHandler.EncryptToken
  - JsonWebTokenHandler::EncryptToken
  helpviewer_keywords:
  - JsonWebTokenHandler.EncryptToken method [.NET]
  - EncryptToken method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.EncryptToken(String, EncryptingCredentials, String, IDictionary<String,Object>) method [.NET]
  - EncryptToken(String, EncryptingCredentials, String, IDictionary<String,Object>) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.EncryptToken(String, EncryptingCredentials, String) method [.NET]
  - EncryptToken(String, EncryptingCredentials, String) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.EncryptToken(String, EncryptingCredentials, IDictionary<String,Object>) method [.NET]
  - EncryptToken(String, EncryptingCredentials, IDictionary<String,Object>) method [.NET], class JsonWebTokenHandler
  - JsonWebTokenHandler.EncryptToken(String, EncryptingCredentials) method [.NET]
  - EncryptToken(String, EncryptingCredentials) method [.NET], class JsonWebTokenHandler
  monikers:
  - msal-web-dotnet-latest
