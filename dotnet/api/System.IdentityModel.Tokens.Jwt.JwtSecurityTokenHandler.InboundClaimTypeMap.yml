### YamlMime:NetMember
type: property
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  exceptions:
  - description: "'value' is null."
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: property
  uid: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap
  commentId: P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap
  name: InboundClaimTypeMap
  fullName: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap
  nameWithType: JwtSecurityTokenHandler.InboundClaimTypeMap
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public System.Collections.Generic.IDictionary<string,string> InboundClaimTypeMap { get; set; }
  - lang: fsharp
    values:
    - value: 'member this.InboundClaimTypeMap : System.Collections.Generic.IDictionary<string, string> with get, set'
  - lang: vb
    values:
    - value: Public Property InboundClaimTypeMap As IDictionary(Of String, String)
  monikers:
  - msal-web-dotnet-latest
  summary: >-
    Gets or sets the <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap"></xref> which is used when setting the <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim.Type"></xref> for claims in the <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.ClaimsPrincipal"></xref> extracted when validating a <xref data-throw-if-not-resolved="true" uid="System.IdentityModel.Tokens.Jwt.JwtSecurityToken"></xref>. 

    <p>The <xref data-throw-if-not-resolved="true" uid="System.Security.Claims.Claim.Type"></xref> is set to the JSON claim 'name' after translating using this mapping.</p><p>The default value is ClaimTypeMapping.InboundClaimTypeMap.</p>
  metadata: {}
uid: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap*
commentId: Overload:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap
namespace: System.IdentityModel.Tokens.Jwt
name: InboundClaimTypeMap
fullName: System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap
nameWithType: JwtSecurityTokenHandler.InboundClaimTypeMap
assembliesWithMoniker:
- value: System.IdentityModel.Tokens.Jwt.dll
packagesWithMoniker:
- value: System.IdentityModel.Tokens.Jwt v6.25.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-web-dotnet-latest
metadata:
  api_name:
  - System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap
  - System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.get_InboundClaimTypeMap
  - System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.set_InboundClaimTypeMap
  api_location:
  - System.IdentityModel.Tokens.Jwt.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap
  - System::IdentityModel::Tokens::Jwt::JwtSecurityTokenHandler::InboundClaimTypeMap
  - InboundClaimTypeMap
  - JwtSecurityTokenHandler.InboundClaimTypeMap
  - JwtSecurityTokenHandler::InboundClaimTypeMap
  helpviewer_keywords:
  - JwtSecurityTokenHandler.InboundClaimTypeMap property [.NET]
  - InboundClaimTypeMap property [.NET], class JwtSecurityTokenHandler
  monikers:
  - msal-web-dotnet-latest
