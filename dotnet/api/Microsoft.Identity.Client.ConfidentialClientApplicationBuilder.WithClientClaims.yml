### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.Identity.Client.ConfidentialClientApplicationBuilder?alt=Microsoft.Identity.Client.ConfidentialClientApplicationBuilder&text=ConfidentialClientApplicationBuilder" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: certificate
    description: The X509 certificate used as credentials to prove the identity of the application to Azure AD.
    type: <xref href="System.Security.Cryptography.X509Certificates.X509Certificate2?alt=System.Security.Cryptography.X509Certificates.X509Certificate2&text=X509Certificate2" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: claimsToSign
    description: The claims to be signed by the provided certificate.
    type: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: mergeWithDefaultClaims
    description: Determines whether or not to merge <code data-dev-comment-type="paramref">claimsToSign</code> with the default claims required for authentication.
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  commentId: M:Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  name: WithClientClaims(X509Certificate2, IDictionary<String,String>, Boolean)
  fullName: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims(X509Certificate2, IDictionary<String,String>, Boolean)
  nameWithType: ConfidentialClientApplicationBuilder.WithClientClaims(X509Certificate2, IDictionary<String,String>, Boolean)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public Microsoft.Identity.Client.ConfidentialClientApplicationBuilder WithClientClaims (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Collections.Generic.IDictionary<string,string> claimsToSign, bool mergeWithDefaultClaims);
  - lang: fsharp
    values:
    - value: 'member this.WithClientClaims : System.Security.Cryptography.X509Certificates.X509Certificate2 * System.Collections.Generic.IDictionary<string, string> * bool -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder'
  - lang: vb
    values:
    - value: Public Function WithClientClaims (certificate As X509Certificate2, claimsToSign As IDictionary(Of String, String), mergeWithDefaultClaims As Boolean) As ConfidentialClientApplicationBuilder
  monikers:
  - msal-dotnet-latest
  summary: >-
    Sets the certificate associated with the application along with the specific claims to sign.

    By default, this will merge the <code data-dev-comment-type="paramref">claimsToSign</code> with the default required set of claims needed for authentication.

    If <code data-dev-comment-type="paramref">mergeWithDefaultClaims</code> is set to false, you will need to provide the required default claims. See https://aka.ms/msal-net-client-assertion
  remarks: <p>You should use certificates with a private key size of at least 2048 bytes. Future versions of this library might reject certificates with smaller keys. Does not send the certificate (as x5c parameter) with the request by default.</p>
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.Identity.Client.ConfidentialClientApplicationBuilder?alt=Microsoft.Identity.Client.ConfidentialClientApplicationBuilder&text=ConfidentialClientApplicationBuilder" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: certificate
    description: The X509 certificate used as credentials to prove the identity of the application to Azure AD.
    type: <xref href="System.Security.Cryptography.X509Certificates.X509Certificate2?alt=System.Security.Cryptography.X509Certificates.X509Certificate2&text=X509Certificate2" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: claimsToSign
    description: The claims to be signed by the provided certificate.
    type: <xref href="System.Collections.Generic.IDictionary`2?alt=System.Collections.Generic.IDictionary&text=IDictionary" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>,<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: mergeWithDefaultClaims
    description: Determines whether or not to merge <code data-dev-comment-type="paramref">claimsToSign</code> with the default claims required for authentication.
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: sendX5C
    description: To send X5C with every request or not.
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Boolean)
  commentId: M:Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Boolean)
  name: WithClientClaims(X509Certificate2, IDictionary<String,String>, Boolean, Boolean)
  fullName: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims(X509Certificate2, IDictionary<String,String>, Boolean, Boolean)
  nameWithType: ConfidentialClientApplicationBuilder.WithClientClaims(X509Certificate2, IDictionary<String,String>, Boolean, Boolean)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public Microsoft.Identity.Client.ConfidentialClientApplicationBuilder WithClientClaims (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Collections.Generic.IDictionary<string,string> claimsToSign, bool mergeWithDefaultClaims = true, bool sendX5C = false);
  - lang: fsharp
    values:
    - value: 'member this.WithClientClaims : System.Security.Cryptography.X509Certificates.X509Certificate2 * System.Collections.Generic.IDictionary<string, string> * bool * bool -> Microsoft.Identity.Client.ConfidentialClientApplicationBuilder'
  - lang: vb
    values:
    - value: Public Function WithClientClaims (certificate As X509Certificate2, claimsToSign As IDictionary(Of String, String), Optional mergeWithDefaultClaims As Boolean = true, Optional sendX5C As Boolean = false) As ConfidentialClientApplicationBuilder
  monikers:
  - msal-dotnet-latest
  summary: >-
    Sets the certificate associated with the application along with the specific claims to sign.

    By default, this will merge the <code data-dev-comment-type="paramref">claimsToSign</code> with the default required set of claims needed for authentication.

    If <code data-dev-comment-type="paramref">mergeWithDefaultClaims</code> is set to false, you will need to provide the required default claims. See https://aka.ms/msal-net-client-assertion
  remarks: You should use certificates with a private key size of at least 2048 bytes. Future versions of this library might reject certificates with smaller keys.
  metadata: {}
uid: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims*
commentId: Overload:Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims
namespace: Microsoft.Identity.Client
name: WithClientClaims
fullName: Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims
nameWithType: ConfidentialClientApplicationBuilder.WithClientClaims
assembliesWithMoniker:
- value: Microsoft.Identity.Client.dll
packagesWithMoniker:
- value: Microsoft.Identity.Client v4.49.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims
  api_location:
  - Microsoft.Identity.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Client.ConfidentialClientApplicationBuilder.WithClientClaims
  - Microsoft::Identity::Client::ConfidentialClientApplicationBuilder::WithClientClaims
  - WithClientClaims
  - ConfidentialClientApplicationBuilder.WithClientClaims
  - ConfidentialClientApplicationBuilder::WithClientClaims
  helpviewer_keywords:
  - ConfidentialClientApplicationBuilder.WithClientClaims method [.NET]
  - WithClientClaims method [.NET], class ConfidentialClientApplicationBuilder
  - ConfidentialClientApplicationBuilder.WithClientClaims(X509Certificate2, IDictionary<String,String>, Boolean) method [.NET]
  - WithClientClaims(X509Certificate2, IDictionary<String,String>, Boolean) method [.NET], class ConfidentialClientApplicationBuilder
  - ConfidentialClientApplicationBuilder.WithClientClaims(X509Certificate2, IDictionary<String,String>, Boolean, Boolean) method [.NET]
  - WithClientClaims(X509Certificate2, IDictionary<String,String>, Boolean, Boolean) method [.NET], class ConfidentialClientApplicationBuilder
  monikers:
  - msal-dotnet-latest
