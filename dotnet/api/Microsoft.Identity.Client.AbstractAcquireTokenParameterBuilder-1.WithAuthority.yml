### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: T
    description: The builder to chain the .With methods.
  parameters:
  - namesWithMoniker:
    - value: cloudInstanceUri
    description: >-
      Uri to the Azure Cloud instance (for instance
                  <code data-dev-comment-type="c">https://login.microsoftonline.com)</code>.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: tenant
    description: Tenant Id associated with the tenant from which to sign-in users.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: validateAuthority
    description: Whether the authority should be validated against the server metadata.
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(System.String,System.String,System.Boolean)
  commentId: M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(System.String,System.String,System.Boolean)
  name: WithAuthority(String, String, Boolean)
  fullName: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(String, String, Boolean)
  nameWithType: AbstractAcquireTokenParameterBuilder<T>.WithAuthority(String, String, Boolean)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public T WithAuthority (string cloudInstanceUri, string tenant, bool validateAuthority = true);
  - lang: fsharp
    values:
    - value: "member this.WithAuthority : string * string * bool -> 'T"
  - lang: vb
    values:
    - value: Public Function WithAuthority (cloudInstanceUri As String, tenant As String, Optional validateAuthority As Boolean = true) As T
  monikers:
  - msal-dotnet-latest
  summary: >-
    Important: Use WithTenantId or WithTenantIdFromAuthority instead, or WithB2CAuthority for B2C authorities.


    Adds a known Azure AD authority to the application to sign-in users from a single

    organization (single tenant application) described by its domain name. See https://aka.ms/msal-net-application-configuration.
  remarks: <p><code data-dev-comment-type="paramref">tenant</code> can also contain the string representation of a GUID (tenantId), or even <code data-dev-comment-type="c">common</code>, <code data-dev-comment-type="c">organizations</code> or <code data-dev-comment-type="c">consumers</code> but in this case it's recommended to use another override (<xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance,System.Guid,System.Boolean)"></xref> and <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance,Microsoft.Identity.Client.AadAuthorityAudience,System.Boolean)"></xref></p>
  metadata: {}
- returnsWithMoniker:
    type:
    - value: T
    description: The builder to chain the .With methods.
  parameters:
  - namesWithMoniker:
    - value: cloudInstanceUri
    description: Azure Cloud instance.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: tenantId
    description: GUID of the tenant from which to sign-in users.
    type: <xref href="System.Guid?alt=System.Guid&text=Guid" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: validateAuthority
    description: Whether the authority should be validated against the server metadata.
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(System.String,System.Guid,System.Boolean)
  commentId: M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(System.String,System.Guid,System.Boolean)
  name: WithAuthority(String, Guid, Boolean)
  fullName: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(String, Guid, Boolean)
  nameWithType: AbstractAcquireTokenParameterBuilder<T>.WithAuthority(String, Guid, Boolean)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public T WithAuthority (string cloudInstanceUri, Guid tenantId, bool validateAuthority = true);
  - lang: fsharp
    values:
    - value: "member this.WithAuthority : string * Guid * bool -> 'T"
  - lang: vb
    values:
    - value: Public Function WithAuthority (cloudInstanceUri As String, tenantId As Guid, Optional validateAuthority As Boolean = true) As T
  monikers:
  - msal-dotnet-latest
  summary: >-
    Important: Use WithTenantId or WithTenantIdFromAuthority instead, or WithB2CAuthority for B2C authorities.


    Adds a known Azure AD authority to the application to sign-in users from a single

    organization (single tenant application) specified by its tenant ID. See https://aka.ms/msal-net-application-configuration.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: T
    description: The builder to chain the .With methods.
  parameters:
  - namesWithMoniker:
    - value: azureCloudInstance
    description: >-
      Instance of Azure Cloud (for instance Azure
                  worldwide cloud, Azure German Cloud, US government ...).
    type: <xref href="Microsoft.Identity.Client.AzureCloudInstance?alt=Microsoft.Identity.Client.AzureCloudInstance&text=AzureCloudInstance" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: tenantId
    description: Tenant Id of the tenant from which to sign-in users.
    type: <xref href="System.Guid?alt=System.Guid&text=Guid" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: validateAuthority
    description: Whether the authority should be validated against the server metadata.
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance,System.Guid,System.Boolean)
  commentId: M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance,System.Guid,System.Boolean)
  name: WithAuthority(AzureCloudInstance, Guid, Boolean)
  fullName: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(AzureCloudInstance, Guid, Boolean)
  nameWithType: AbstractAcquireTokenParameterBuilder<T>.WithAuthority(AzureCloudInstance, Guid, Boolean)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public T WithAuthority (Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, Guid tenantId, bool validateAuthority = true);
  - lang: fsharp
    values:
    - value: "member this.WithAuthority : Microsoft.Identity.Client.AzureCloudInstance * Guid * bool -> 'T"
  - lang: vb
    values:
    - value: Public Function WithAuthority (azureCloudInstance As AzureCloudInstance, tenantId As Guid, Optional validateAuthority As Boolean = true) As T
  monikers:
  - msal-dotnet-latest
  summary: >-
    Important: Use WithTenantId or WithTenantIdFromAuthority instead, or WithB2CAuthority for B2C authorities.


    Adds a known Azure AD authority to the application to sign-in users from a single

    organization (single tenant application) described by its cloud instance and its tenant ID.

    See https://aka.ms/msal-net-application-configuration.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: T
    description: The builder to chain the .With methods.
  parameters:
  - namesWithMoniker:
    - value: azureCloudInstance
    description: >-
      Instance of Azure Cloud (for instance Azure
                  worldwide cloud, Azure German Cloud, US government ...).
    type: <xref href="Microsoft.Identity.Client.AzureCloudInstance?alt=Microsoft.Identity.Client.AzureCloudInstance&text=AzureCloudInstance" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: tenant
    description: Tenant Id of the tenant from which to sign-in users. This can also be a GUID.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: validateAuthority
    description: Whether the authority should be validated against the server metadata.
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance,System.String,System.Boolean)
  commentId: M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance,System.String,System.Boolean)
  name: WithAuthority(AzureCloudInstance, String, Boolean)
  fullName: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(AzureCloudInstance, String, Boolean)
  nameWithType: AbstractAcquireTokenParameterBuilder<T>.WithAuthority(AzureCloudInstance, String, Boolean)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public T WithAuthority (Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, string tenant, bool validateAuthority = true);
  - lang: fsharp
    values:
    - value: "member this.WithAuthority : Microsoft.Identity.Client.AzureCloudInstance * string * bool -> 'T"
  - lang: vb
    values:
    - value: Public Function WithAuthority (azureCloudInstance As AzureCloudInstance, tenant As String, Optional validateAuthority As Boolean = true) As T
  monikers:
  - msal-dotnet-latest
  summary: >-
    Important: Use WithTenantId or WithTenantIdFromAuthority instead, or WithB2CAuthority for B2C authorities.


    Adds a known Azure AD authority to the application to sign-in users from a single

    organization (single tenant application) described by its cloud instance and its domain

    name or tenant ID. See https://aka.ms/msal-net-application-configuration.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: T
    description: The builder to chain the .With methods.
  parameters:
  - namesWithMoniker:
    - value: authorityUri
    description: >-
      Uri for the authority. In the case when the authority URI is 
                  a known Azure AD URI, this setting needs to be consistent with what is declared in 
                  the application registration portal.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: validateAuthority
    description: Whether the authority should be validated against the server metadata.
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(System.String,System.Boolean)
  commentId: M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(System.String,System.Boolean)
  name: WithAuthority(String, Boolean)
  fullName: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(String, Boolean)
  nameWithType: AbstractAcquireTokenParameterBuilder<T>.WithAuthority(String, Boolean)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public T WithAuthority (string authorityUri, bool validateAuthority = true);
  - lang: fsharp
    values:
    - value: "member this.WithAuthority : string * bool -> 'T"
  - lang: vb
    values:
    - value: Public Function WithAuthority (authorityUri As String, Optional validateAuthority As Boolean = true) As T
  monikers:
  - msal-dotnet-latest
  summary: >-
    Important: Use WithTenantId or WithTenantIdFromAuthority instead, or WithB2CAuthority for B2C authorities.


    Specific authority for which the token is requested. Passing a different value than configured

    at the application constructor narrows down the selection to a specific tenant.

    This does not change the configured value in the application. This is specific

    to applications managing several accounts (like a mail client with several mailboxes).

    See https://aka.ms/msal-net-application-configuration.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: T
    description: The builder to chain the .With methods.
  parameters:
  - namesWithMoniker:
    - value: authorityAudience
    description: >-
      Sign-in audience (one AAD organization,
                  any work and school accounts, or any work and school accounts and Microsoft personal
                  accounts.
    type: <xref href="Microsoft.Identity.Client.AadAuthorityAudience?alt=Microsoft.Identity.Client.AadAuthorityAudience&text=AadAuthorityAudience" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: validateAuthority
    description: Whether the authority should be validated against the server metadata.
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AadAuthorityAudience,System.Boolean)
  commentId: M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AadAuthorityAudience,System.Boolean)
  name: WithAuthority(AadAuthorityAudience, Boolean)
  fullName: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(AadAuthorityAudience, Boolean)
  nameWithType: AbstractAcquireTokenParameterBuilder<T>.WithAuthority(AadAuthorityAudience, Boolean)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public T WithAuthority (Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true);
  - lang: fsharp
    values:
    - value: "member this.WithAuthority : Microsoft.Identity.Client.AadAuthorityAudience * bool -> 'T"
  - lang: vb
    values:
    - value: Public Function WithAuthority (authorityAudience As AadAuthorityAudience, Optional validateAuthority As Boolean = true) As T
  monikers:
  - msal-dotnet-latest
  summary: >-
    Important: Use WithTenantId or WithTenantIdFromAuthority instead, or WithB2CAuthority for B2C authorities.


    Adds a known Azure AD authority to the application to sign-in users specifying

    the sign-in audience (the cloud being the Azure public cloud). See https://aka.ms/msal-net-application-configuration.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: T
    description: The builder to chain the .With methods.
  parameters:
  - namesWithMoniker:
    - value: azureCloudInstance
    description: >-
      Instance of Azure Cloud (for instance Azure
                  worldwide cloud, Azure German Cloud, US government ...).
    type: <xref href="Microsoft.Identity.Client.AzureCloudInstance?alt=Microsoft.Identity.Client.AzureCloudInstance&text=AzureCloudInstance" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: authorityAudience
    description: >-
      Sign-in audience (one AAD organization,
                  any work and school accounts, or any work and school accounts and Microsoft personal
                  accounts.
    type: <xref href="Microsoft.Identity.Client.AadAuthorityAudience?alt=Microsoft.Identity.Client.AadAuthorityAudience&text=AadAuthorityAudience" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: validateAuthority
    description: Whether the authority should be validated against the server metadata.
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance,Microsoft.Identity.Client.AadAuthorityAudience,System.Boolean)
  commentId: M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance,Microsoft.Identity.Client.AadAuthorityAudience,System.Boolean)
  name: WithAuthority(AzureCloudInstance, AadAuthorityAudience, Boolean)
  fullName: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority(AzureCloudInstance, AadAuthorityAudience, Boolean)
  nameWithType: AbstractAcquireTokenParameterBuilder<T>.WithAuthority(AzureCloudInstance, AadAuthorityAudience, Boolean)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public T WithAuthority (Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true);
  - lang: fsharp
    values:
    - value: "member this.WithAuthority : Microsoft.Identity.Client.AzureCloudInstance * Microsoft.Identity.Client.AadAuthorityAudience * bool -> 'T"
  - lang: vb
    values:
    - value: Public Function WithAuthority (azureCloudInstance As AzureCloudInstance, authorityAudience As AadAuthorityAudience, Optional validateAuthority As Boolean = true) As T
  monikers:
  - msal-dotnet-latest
  summary: >-
    Adds a known Azure AD authority to the application to sign-in users specifying

    the cloud instance and the sign-in audience. See https://aka.ms/msal-net-application-configuration.
  metadata: {}
uid: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority*
commentId: Overload:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority
namespace: Microsoft.Identity.Client
name: WithAuthority
fullName: Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder<T>.WithAuthority
nameWithType: AbstractAcquireTokenParameterBuilder<T>.WithAuthority
assembliesWithMoniker:
- value: Microsoft.Identity.Client.dll
packagesWithMoniker:
- value: Microsoft.Identity.Client v4.49.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority
  api_location:
  - Microsoft.Identity.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority
  - Microsoft::Identity::Client::AbstractAcquireTokenParameterBuilder`1::WithAuthority
  - Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder.WithAuthority
  - WithAuthority
  - AbstractAcquireTokenParameterBuilder`1.WithAuthority
  - AbstractAcquireTokenParameterBuilder`1::WithAuthority
  helpviewer_keywords:
  - AbstractAcquireTokenParameterBuilder<T>.WithAuthority method [.NET]
  - WithAuthority method [.NET], class AbstractAcquireTokenParameterBuilder<T>
  - AbstractAcquireTokenParameterBuilder<T>.WithAuthority(String, String, Boolean) method [.NET]
  - WithAuthority(String, String, Boolean) method [.NET], class AbstractAcquireTokenParameterBuilder<T>
  - AbstractAcquireTokenParameterBuilder<T>.WithAuthority(String, Guid, Boolean) method [.NET]
  - WithAuthority(String, Guid, Boolean) method [.NET], class AbstractAcquireTokenParameterBuilder<T>
  - AbstractAcquireTokenParameterBuilder<T>.WithAuthority(AzureCloudInstance, Guid, Boolean) method [.NET]
  - WithAuthority(AzureCloudInstance, Guid, Boolean) method [.NET], class AbstractAcquireTokenParameterBuilder<T>
  - AbstractAcquireTokenParameterBuilder<T>.WithAuthority(AzureCloudInstance, String, Boolean) method [.NET]
  - WithAuthority(AzureCloudInstance, String, Boolean) method [.NET], class AbstractAcquireTokenParameterBuilder<T>
  - AbstractAcquireTokenParameterBuilder<T>.WithAuthority(String, Boolean) method [.NET]
  - WithAuthority(String, Boolean) method [.NET], class AbstractAcquireTokenParameterBuilder<T>
  - AbstractAcquireTokenParameterBuilder<T>.WithAuthority(AadAuthorityAudience, Boolean) method [.NET]
  - WithAuthority(AadAuthorityAudience, Boolean) method [.NET], class AbstractAcquireTokenParameterBuilder<T>
  - AbstractAcquireTokenParameterBuilder<T>.WithAuthority(AzureCloudInstance, AadAuthorityAudience, Boolean) method [.NET]
  - WithAuthority(AzureCloudInstance, AadAuthorityAudience, Boolean) method [.NET], class AbstractAcquireTokenParameterBuilder<T>
  monikers:
  - msal-dotnet-latest
