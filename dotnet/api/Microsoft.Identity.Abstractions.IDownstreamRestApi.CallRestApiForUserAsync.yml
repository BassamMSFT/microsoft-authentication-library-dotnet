### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Net.Http.HttpResponseMessage?alt=System.Net.Http.HttpResponseMessage&text=HttpResponseMessage" data-throw-if-not-resolved="True"/>&gt;
    description: An <xref data-throw-if-not-resolved="true" uid="System.Net.Http.HttpResponseMessage"></xref> that the application will process.
  parameters:
  - namesWithMoniker:
    - value: serviceName
    description: >-
      Name of the service describing the downstream web API. There can
                  be several configuration named sections mapped to a <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Abstractions.DownstreamRestApiOptions"></xref>,
                  each for one downstream REST API. You can pass-in null, but in that case <code data-dev-comment-type="paramref">downstreamRestApiOptionsOverride</code>
                  needs to be set.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: downstreamRestApiOptionsOverride
    description: >-
      (Optional) Overrides the options proposed in the configuration described
                  by <code data-dev-comment-type="paramref">serviceName</code>.
    type: <xref href="System.Action`1?alt=System.Action&text=Action" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.Identity.Abstractions.DownstreamRestApiOptions?alt=Microsoft.Identity.Abstractions.DownstreamRestApiOptions&text=DownstreamRestApiOptions" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: user
    description: >-
      (Optional) Claims representing a user. This is useful on platforms like Blazor
                  or Azure Signal R, where the HttpContext is not available. In other platforms, the library
                  will find the user from the HTTP request context.
    type: <xref href="System.Security.Claims.ClaimsPrincipal?alt=System.Security.Claims.ClaimsPrincipal&text=ClaimsPrincipal" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: >-
      Content to send to the REST API in the case where
                  <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Abstractions.AuthorizationHeaderProviderOptions.HttpMethod"></xref> is <code>HttpMethod.Patch</code>, 
                  <xref data-throw-if-not-resolved="true" uid="System.Net.Http.HttpMethod.Post"></xref>, <xref data-throw-if-not-resolved="true" uid="System.Net.Http.HttpMethod.Put"></xref>.
    type: <xref href="System.Net.Http.HttpContent?alt=System.Net.Http.HttpContent&text=HttpContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: Cancellation token.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync(System.String,System.Action{Microsoft.Identity.Abstractions.DownstreamRestApiOptions},System.Security.Claims.ClaimsPrincipal,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  commentId: M:Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync(System.String,System.Action{Microsoft.Identity.Abstractions.DownstreamRestApiOptions},System.Security.Claims.ClaimsPrincipal,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  name: CallRestApiForUserAsync(String, Action<DownstreamRestApiOptions>, ClaimsPrincipal, HttpContent, CancellationToken)
  fullName: Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync(String, Action<DownstreamRestApiOptions>, ClaimsPrincipal, HttpContent, CancellationToken)
  nameWithType: IDownstreamRestApi.CallRestApiForUserAsync(String, Action<DownstreamRestApiOptions>, ClaimsPrincipal, HttpContent, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> CallRestApiForUserAsync (string? serviceName, Action<Microsoft.Identity.Abstractions.DownstreamRestApiOptions>? downstreamRestApiOptionsOverride = default, System.Security.Claims.ClaimsPrincipal? user = default, System.Net.Http.HttpContent? content = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: 'abstract member CallRestApiForUserAsync : string * Action<Microsoft.Identity.Abstractions.DownstreamRestApiOptions> * System.Security.Claims.ClaimsPrincipal * System.Net.Http.HttpContent * System.Threading.CancellationToken -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>'
  - lang: vb
    values:
    - value: Public Function CallRestApiForUserAsync (serviceName As String, Optional downstreamRestApiOptionsOverride As Action(Of DownstreamRestApiOptions) = Nothing, Optional user As ClaimsPrincipal = Nothing, Optional content As HttpContent = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of HttpResponseMessage)
  monikers:
  - msal-model-dotnet-latest
  summary: >-
    Calls the downstream REST API on behalf of the user, based on a description of the

    downstream REST API in the configuration (service name), overridatable programmatically. This

    is a lower level API. There are other APIs for specific Http methods.
  metadata: {}
- typeParameters:
  - description: Input type.
    name: TInput
  - description: Output type.
    name: TOutput
  returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;TOutput&gt;
    description: The value returned by the downstream web API.
  parameters:
  - namesWithMoniker:
    - value: serviceName
    description: >-
      Name of the service describing the downstream REST API. There can
                   be several configuration named sections mapped to a <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Abstractions.DownstreamRestApiOptions"></xref>,
                   each for one downstream REST API. You can pass-in null, but in that case <code data-dev-comment-type="paramref">downstreamRestApiOptionsOverride</code>
                   needs to be set.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: input
    description: Input parameter to the downstream web API.
    type: TInput
  - namesWithMoniker:
    - value: downstreamRestApiOptionsOverride
    description: >-
      Overrides the options proposed in the configuration described
                   by <code data-dev-comment-type="paramref">serviceName</code>.
    type: <xref href="System.Action`1?alt=System.Action&text=Action" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.Identity.Abstractions.DownstreamRestApiOptions?alt=Microsoft.Identity.Abstractions.DownstreamRestApiOptions&text=DownstreamRestApiOptions" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: user
    description: >-
      [Optional] Claims representing a user. This is useful in platforms like Blazor
                   or Azure Signal R, where the HttpContext is not available. In other platforms, the library
                   will find the user from the HttpContext.
    type: <xref href="System.Security.Claims.ClaimsPrincipal?alt=System.Security.Claims.ClaimsPrincipal&text=ClaimsPrincipal" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: Cancellation token.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync``2(System.String,``0,System.Action{Microsoft.Identity.Abstractions.DownstreamRestApiOptions},System.Security.Claims.ClaimsPrincipal,System.Threading.CancellationToken)
  commentId: M:Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync``2(System.String,``0,System.Action{Microsoft.Identity.Abstractions.DownstreamRestApiOptions},System.Security.Claims.ClaimsPrincipal,System.Threading.CancellationToken)
  name: CallRestApiForUserAsync<TInput,TOutput>(String, TInput, Action<DownstreamRestApiOptions>, ClaimsPrincipal, CancellationToken)
  fullName: Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync<TInput,TOutput>(String, TInput, Action<DownstreamRestApiOptions>, ClaimsPrincipal, CancellationToken)
  nameWithType: IDownstreamRestApi.CallRestApiForUserAsync<TInput,TOutput>(String, TInput, Action<DownstreamRestApiOptions>, ClaimsPrincipal, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: 'public System.Threading.Tasks.Task<TOutput?> CallRestApiForUserAsync<TInput,TOutput> (string? serviceName, TInput input, Action<Microsoft.Identity.Abstractions.DownstreamRestApiOptions>? downstreamRestApiOptionsOverride = default, System.Security.Claims.ClaimsPrincipal? user = default, System.Threading.CancellationToken cancellationToken = default) where TOutput : class;'
  - lang: fsharp
    values:
    - value: "abstract member CallRestApiForUserAsync : string * 'Input * Action<Microsoft.Identity.Abstractions.DownstreamRestApiOptions> * System.Security.Claims.ClaimsPrincipal * System.Threading.CancellationToken -> System.Threading.Tasks.Task<'Output (requires 'Output : null)> (requires 'Output : null)"
  - lang: vb
    values:
    - value: Public Function CallRestApiForUserAsync(Of TInput, TOutput) (serviceName As String, input As TInput, Optional downstreamRestApiOptionsOverride As Action(Of DownstreamRestApiOptions) = Nothing, Optional user As ClaimsPrincipal = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TOutput)
  monikers:
  - msal-model-dotnet-latest
  summary: Calls a downstream REST API consuming JSON with some data and returns data.
  examples: >-
    A list method that returns an IEnumerable&lt;MyItem&gt;&gt;.


    ```

    public Task<IEnumerable<MyItem>> GetAsync()

    {
     return _downstreamWebApi.CallWebApiForUserAsync<object, IEnumerable<MyItem>>(
            ServiceName,
            null,
            options =>
            {
              options.RelativePath = $"api/todolist";
            });
    }

    ```


    Example of editing.


    ```

    public Task<MyItem> EditAsync(MyItem myItem)

    {
      return _downstreamWebApi.CallWebApiForUserAsync<MyItem, MyItem>(
            ServiceName,
            nyItem,
            options =>
            {
               options.HttpMethod = HttpMethod.Patch;
               options.RelativePath = $"api/todolist/{myItem.Id}";
            });
    }

    ```
  metadata: {}
- typeParameters:
  - description: Output type.
    name: TOutput
  returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;TOutput&gt;
    description: The value returned by the downstream web API.
  parameters:
  - namesWithMoniker:
    - value: serviceName
    description: >-
      Name of the service describing the downstream REST API. There can
                  be several configuration named sections mapped to a <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Abstractions.DownstreamRestApiOptions"></xref>,
                  each for one downstream REST API. You can pass-in null, but in that case <code data-dev-comment-type="paramref">downstreamRestApiOptionsOverride</code>
                  needs to be set.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: downstreamRestApiOptionsOverride
    description: >-
      Overrides the options proposed in the configuration described
                  by <code data-dev-comment-type="paramref">serviceName</code>.
    type: <xref href="System.Action`1?alt=System.Action&text=Action" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.Identity.Abstractions.DownstreamRestApiOptions?alt=Microsoft.Identity.Abstractions.DownstreamRestApiOptions&text=DownstreamRestApiOptions" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: user
    description: >-
      [Optional] Claims representing a user. This is useful in platforms like Blazor
                  or Azure Signal R, where the HttpContext is not available. In other platforms, the library
                  will find the user from the HttpContext.
    type: <xref href="System.Security.Claims.ClaimsPrincipal?alt=System.Security.Claims.ClaimsPrincipal&text=ClaimsPrincipal" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: Cancellation token.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync``1(System.String,System.Action{Microsoft.Identity.Abstractions.DownstreamRestApiOptions},System.Security.Claims.ClaimsPrincipal,System.Threading.CancellationToken)
  commentId: M:Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync``1(System.String,System.Action{Microsoft.Identity.Abstractions.DownstreamRestApiOptions},System.Security.Claims.ClaimsPrincipal,System.Threading.CancellationToken)
  name: CallRestApiForUserAsync<TOutput>(String, Action<DownstreamRestApiOptions>, ClaimsPrincipal, CancellationToken)
  fullName: Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync<TOutput>(String, Action<DownstreamRestApiOptions>, ClaimsPrincipal, CancellationToken)
  nameWithType: IDownstreamRestApi.CallRestApiForUserAsync<TOutput>(String, Action<DownstreamRestApiOptions>, ClaimsPrincipal, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: 'public System.Threading.Tasks.Task<TOutput?> CallRestApiForUserAsync<TOutput> (string serviceName, Action<Microsoft.Identity.Abstractions.DownstreamRestApiOptions>? downstreamRestApiOptionsOverride = default, System.Security.Claims.ClaimsPrincipal? user = default, System.Threading.CancellationToken cancellationToken = default) where TOutput : class;'
  - lang: fsharp
    values:
    - value: "abstract member CallRestApiForUserAsync : string * Action<Microsoft.Identity.Abstractions.DownstreamRestApiOptions> * System.Security.Claims.ClaimsPrincipal * System.Threading.CancellationToken -> System.Threading.Tasks.Task<'Output (requires 'Output : null)> (requires 'Output : null)"
  - lang: vb
    values:
    - value: Public Function CallRestApiForUserAsync(Of TOutput As Class) (serviceName As String, Optional downstreamRestApiOptionsOverride As Action(Of DownstreamRestApiOptions) = Nothing, Optional user As ClaimsPrincipal = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TOutput)
  monikers:
  - msal-model-dotnet-latest
  summary: Call a web API endpoint with an HttpGet, and return strongly typed data.
  metadata: {}
uid: Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync*
commentId: Overload:Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync
namespace: Microsoft.Identity.Abstractions
name: CallRestApiForUserAsync
fullName: Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync
nameWithType: IDownstreamRestApi.CallRestApiForUserAsync
assembliesWithMoniker:
- value: Microsoft.Identity.Abstractions.dll
packagesWithMoniker:
- value: Microsoft.Identity.Abstractions v1.1.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-model-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync
  api_location:
  - Microsoft.Identity.Abstractions.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync
  - Microsoft::Identity::Abstractions::IDownstreamRestApi::CallRestApiForUserAsync
  - CallRestApiForUserAsync
  - IDownstreamRestApi.CallRestApiForUserAsync
  - IDownstreamRestApi::CallRestApiForUserAsync
  - Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync``2
  - Microsoft::Identity::Abstractions::IDownstreamRestApi::CallRestApiForUserAsync``2
  - CallRestApiForUserAsync``2
  - IDownstreamRestApi.CallRestApiForUserAsync``2
  - IDownstreamRestApi::CallRestApiForUserAsync``2
  - Microsoft.Identity.Abstractions.IDownstreamRestApi.CallRestApiForUserAsync``1
  - Microsoft::Identity::Abstractions::IDownstreamRestApi::CallRestApiForUserAsync``1
  - CallRestApiForUserAsync``1
  - IDownstreamRestApi.CallRestApiForUserAsync``1
  - IDownstreamRestApi::CallRestApiForUserAsync``1
  helpviewer_keywords:
  - IDownstreamRestApi.CallRestApiForUserAsync method [.NET]
  - CallRestApiForUserAsync method [.NET], interface IDownstreamRestApi
  - IDownstreamRestApi.CallRestApiForUserAsync(String, Action<DownstreamRestApiOptions>, ClaimsPrincipal, HttpContent, CancellationToken) method [.NET]
  - CallRestApiForUserAsync(String, Action<DownstreamRestApiOptions>, ClaimsPrincipal, HttpContent, CancellationToken) method [.NET], interface IDownstreamRestApi
  - IDownstreamRestApi.CallRestApiForUserAsync<TInput,TOutput>(String, TInput, Action<DownstreamRestApiOptions>, ClaimsPrincipal, CancellationToken) method [.NET]
  - CallRestApiForUserAsync<TInput,TOutput>(String, TInput, Action<DownstreamRestApiOptions>, ClaimsPrincipal, CancellationToken) method [.NET], interface IDownstreamRestApi
  - IDownstreamRestApi.CallRestApiForUserAsync<TOutput>(String, Action<DownstreamRestApiOptions>, ClaimsPrincipal, CancellationToken) method [.NET]
  - CallRestApiForUserAsync<TOutput>(String, Action<DownstreamRestApiOptions>, ClaimsPrincipal, CancellationToken) method [.NET], interface IDownstreamRestApi
  monikers:
  - msal-model-dotnet-latest
