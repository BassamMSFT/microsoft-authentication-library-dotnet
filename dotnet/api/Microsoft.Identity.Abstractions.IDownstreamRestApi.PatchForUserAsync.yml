### YamlMime:NetMember
type: method
members:
- typeParameters:
  - description: Generic input type.
    name: TInput
  - description: Generic output type.
    name: TOutput
  returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;TOutput&gt;
    description: The value returned by the downstream web API.
  parameters:
  - namesWithMoniker:
    - value: serviceName
    description: >-
      Name of the service describing the downstream REST API. There can
                  be several configuration named sections mapped to a <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Abstractions.DownstreamRestApiOptions"></xref>,
                  each for one downstream REST API. You can pass-in null, but in that case <code data-dev-comment-type="paramref">downstreamRestApiOptionsOverride</code>
                  needs to be set.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: input
    description: Data sent to the downstream web API, through the body or the HTTP request.
    type: TInput
  - namesWithMoniker:
    - value: downstreamRestApiOptionsOverride
    description: >-
      [Optional] Overrides the options proposed in the configuration described
                  by <code data-dev-comment-type="paramref">serviceName</code>.
    type: <xref href="System.Action`1?alt=System.Action&text=Action" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.Identity.Abstractions.DownstreamRestApiOptionsReadOnlyHttpMethod?alt=Microsoft.Identity.Abstractions.DownstreamRestApiOptionsReadOnlyHttpMethod&text=DownstreamRestApiOptionsReadOnlyHttpMethod" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: user
    description: >-
      [Optional] Claims representing a user. This is useful in platforms like Blazor
                  or Azure Signal R, where the HttpContext is not available. In other platforms, the library
                  will find the user from the HttpContext.
    type: <xref href="System.Security.Claims.ClaimsPrincipal?alt=System.Security.Claims.ClaimsPrincipal&text=ClaimsPrincipal" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Abstractions.IDownstreamRestApi.PatchForUserAsync``2(System.String,``0,System.Action{Microsoft.Identity.Abstractions.DownstreamRestApiOptionsReadOnlyHttpMethod},System.Security.Claims.ClaimsPrincipal,System.Threading.CancellationToken)
  commentId: M:Microsoft.Identity.Abstractions.IDownstreamRestApi.PatchForUserAsync``2(System.String,``0,System.Action{Microsoft.Identity.Abstractions.DownstreamRestApiOptionsReadOnlyHttpMethod},System.Security.Claims.ClaimsPrincipal,System.Threading.CancellationToken)
  name: PatchForUserAsync<TInput,TOutput>(String, TInput, Action<DownstreamRestApiOptionsReadOnlyHttpMethod>, ClaimsPrincipal, CancellationToken)
  fullName: Microsoft.Identity.Abstractions.IDownstreamRestApi.PatchForUserAsync<TInput,TOutput>(String, TInput, Action<DownstreamRestApiOptionsReadOnlyHttpMethod>, ClaimsPrincipal, CancellationToken)
  nameWithType: IDownstreamRestApi.PatchForUserAsync<TInput,TOutput>(String, TInput, Action<DownstreamRestApiOptionsReadOnlyHttpMethod>, ClaimsPrincipal, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: 'public System.Threading.Tasks.Task<TOutput?> PatchForUserAsync<TInput,TOutput> (string? serviceName, TInput input, Action<Microsoft.Identity.Abstractions.DownstreamRestApiOptionsReadOnlyHttpMethod>? downstreamRestApiOptionsOverride = default, System.Security.Claims.ClaimsPrincipal? user = default, System.Threading.CancellationToken cancellationToken = default) where TOutput : class;'
  - lang: fsharp
    values:
    - value: "abstract member PatchForUserAsync : string * 'Input * Action<Microsoft.Identity.Abstractions.DownstreamRestApiOptionsReadOnlyHttpMethod> * System.Security.Claims.ClaimsPrincipal * System.Threading.CancellationToken -> System.Threading.Tasks.Task<'Output (requires 'Output : null)> (requires 'Output : null)"
  - lang: vb
    values:
    - value: Public Function PatchForUserAsync(Of TInput, TOutput) (serviceName As String, input As TInput, Optional downstreamRestApiOptionsOverride As Action(Of DownstreamRestApiOptionsReadOnlyHttpMethod) = Nothing, Optional user As ClaimsPrincipal = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TOutput)
  monikers:
  - msal-model-dotnet-latest
  summary: >-
    Calls, using <xref data-throw-if-not-resolved="true" uid="System.Net.Http.HttpMethod.Patch"></xref>, a downstream REST API with some input data and returning data.

    By default the input data is serialized in JSON and the returned data is deserialized from JSON but you can provide your own serializer and your own deserializer in the action

    you pass-in through the <code data-dev-comment-type="paramref">downstreamRestApiOptionsOverride</code> parameter.
  examples: >-
    ```

    var result = await _downstreamRestApi.PatchForUserAsync<MyItem, IEnumerable<MyItem>>(
           "MyService",
           myItem,
           options =>
           {
             options.RelativePath = $"api/todolist/{myItem.Id}";
           });
    ```
  metadata: {}
- typeParameters:
  - description: Generic input type.
    name: TInput
  returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>
    description: The value returned by the downstream web API.
  parameters:
  - namesWithMoniker:
    - value: serviceName
    description: >-
      Name of the service describing the downstream REST API. There can
                  be several configuration named sections mapped to a <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Abstractions.DownstreamRestApiOptions"></xref>,
                  each for one downstream REST API. You can pass-in null, but in that case <code data-dev-comment-type="paramref">downstreamRestApiOptionsOverride</code>
                  needs to be set.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: input
    description: Data sent to the downstream web API, through the body or the HTTP request.
    type: TInput
  - namesWithMoniker:
    - value: downstreamRestApiOptionsOverride
    description: >-
      [Optional] Overrides the options proposed in the configuration described
                  by <code data-dev-comment-type="paramref">serviceName</code>.
    type: <xref href="System.Action`1?alt=System.Action&text=Action" data-throw-if-not-resolved="True"/>&lt;<xref href="Microsoft.Identity.Abstractions.DownstreamRestApiOptionsReadOnlyHttpMethod?alt=Microsoft.Identity.Abstractions.DownstreamRestApiOptionsReadOnlyHttpMethod&text=DownstreamRestApiOptionsReadOnlyHttpMethod" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: user
    description: >-
      [Optional] Claims representing a user. This is useful in platforms like Blazor
                  or Azure Signal R, where the HttpContext is not available. In other platforms, the library
                  will find the user from the HttpContext.
    type: <xref href="System.Security.Claims.ClaimsPrincipal?alt=System.Security.Claims.ClaimsPrincipal&text=ClaimsPrincipal" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Abstractions.IDownstreamRestApi.PatchForUserAsync``1(System.String,``0,System.Action{Microsoft.Identity.Abstractions.DownstreamRestApiOptionsReadOnlyHttpMethod},System.Security.Claims.ClaimsPrincipal,System.Threading.CancellationToken)
  commentId: M:Microsoft.Identity.Abstractions.IDownstreamRestApi.PatchForUserAsync``1(System.String,``0,System.Action{Microsoft.Identity.Abstractions.DownstreamRestApiOptionsReadOnlyHttpMethod},System.Security.Claims.ClaimsPrincipal,System.Threading.CancellationToken)
  name: PatchForUserAsync<TInput>(String, TInput, Action<DownstreamRestApiOptionsReadOnlyHttpMethod>, ClaimsPrincipal, CancellationToken)
  fullName: Microsoft.Identity.Abstractions.IDownstreamRestApi.PatchForUserAsync<TInput>(String, TInput, Action<DownstreamRestApiOptionsReadOnlyHttpMethod>, ClaimsPrincipal, CancellationToken)
  nameWithType: IDownstreamRestApi.PatchForUserAsync<TInput>(String, TInput, Action<DownstreamRestApiOptionsReadOnlyHttpMethod>, ClaimsPrincipal, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public System.Threading.Tasks.Task PatchForUserAsync<TInput> (string? serviceName, TInput input, Action<Microsoft.Identity.Abstractions.DownstreamRestApiOptionsReadOnlyHttpMethod>? downstreamRestApiOptionsOverride = default, System.Security.Claims.ClaimsPrincipal? user = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: "abstract member PatchForUserAsync : string * 'Input * Action<Microsoft.Identity.Abstractions.DownstreamRestApiOptionsReadOnlyHttpMethod> * System.Security.Claims.ClaimsPrincipal * System.Threading.CancellationToken -> System.Threading.Tasks.Task"
  - lang: vb
    values:
    - value: Public Function PatchForUserAsync(Of TInput) (serviceName As String, input As TInput, Optional downstreamRestApiOptionsOverride As Action(Of DownstreamRestApiOptionsReadOnlyHttpMethod) = Nothing, Optional user As ClaimsPrincipal = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task
  monikers:
  - msal-model-dotnet-latest
  summary: >-
    Calls, using <xref data-throw-if-not-resolved="true" uid="System.Net.Http.HttpMethod.Patch"></xref>, a downstream REST API with some input data .

    By default the input data is serialized in JSON  but you can provide your own serializer in the action

    you pass-in through the <code data-dev-comment-type="paramref">downstreamRestApiOptionsOverride</code> parameter.
  examples: >-
    ```

    await _downstreamRestApi.PatchForUserAsync<MyItem>(
          "MyService",
          myItem,
          options =>
          {
            options.RelativePath = $"api/todolist/{myItem.Id}";
          });
    ```
  metadata: {}
uid: Microsoft.Identity.Abstractions.IDownstreamRestApi.PatchForUserAsync*
commentId: Overload:Microsoft.Identity.Abstractions.IDownstreamRestApi.PatchForUserAsync
namespace: Microsoft.Identity.Abstractions
name: PatchForUserAsync
fullName: Microsoft.Identity.Abstractions.IDownstreamRestApi.PatchForUserAsync
nameWithType: IDownstreamRestApi.PatchForUserAsync
assembliesWithMoniker:
- value: Microsoft.Identity.Abstractions.dll
packagesWithMoniker:
- value: Microsoft.Identity.Abstractions v1.1.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-model-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Abstractions.IDownstreamRestApi.PatchForUserAsync
  api_location:
  - Microsoft.Identity.Abstractions.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Abstractions.IDownstreamRestApi.PatchForUserAsync
  - Microsoft::Identity::Abstractions::IDownstreamRestApi::PatchForUserAsync
  - PatchForUserAsync
  - IDownstreamRestApi.PatchForUserAsync
  - IDownstreamRestApi::PatchForUserAsync
  - Microsoft.Identity.Abstractions.IDownstreamRestApi.PatchForUserAsync``2
  - Microsoft::Identity::Abstractions::IDownstreamRestApi::PatchForUserAsync``2
  - PatchForUserAsync``2
  - IDownstreamRestApi.PatchForUserAsync``2
  - IDownstreamRestApi::PatchForUserAsync``2
  - Microsoft.Identity.Abstractions.IDownstreamRestApi.PatchForUserAsync``1
  - Microsoft::Identity::Abstractions::IDownstreamRestApi::PatchForUserAsync``1
  - PatchForUserAsync``1
  - IDownstreamRestApi.PatchForUserAsync``1
  - IDownstreamRestApi::PatchForUserAsync``1
  helpviewer_keywords:
  - IDownstreamRestApi.PatchForUserAsync method [.NET]
  - PatchForUserAsync method [.NET], interface IDownstreamRestApi
  - IDownstreamRestApi.PatchForUserAsync<TInput,TOutput>(String, TInput, Action<DownstreamRestApiOptionsReadOnlyHttpMethod>, ClaimsPrincipal, CancellationToken) method [.NET]
  - PatchForUserAsync<TInput,TOutput>(String, TInput, Action<DownstreamRestApiOptionsReadOnlyHttpMethod>, ClaimsPrincipal, CancellationToken) method [.NET], interface IDownstreamRestApi
  - IDownstreamRestApi.PatchForUserAsync<TInput>(String, TInput, Action<DownstreamRestApiOptionsReadOnlyHttpMethod>, ClaimsPrincipal, CancellationToken) method [.NET]
  - PatchForUserAsync<TInput>(String, TInput, Action<DownstreamRestApiOptionsReadOnlyHttpMethod>, ClaimsPrincipal, CancellationToken) method [.NET], interface IDownstreamRestApi
  monikers:
  - msal-model-dotnet-latest
