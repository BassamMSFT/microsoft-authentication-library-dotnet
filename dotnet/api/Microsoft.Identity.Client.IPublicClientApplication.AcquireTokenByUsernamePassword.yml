### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder?alt=Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder&text=AcquireTokenByUsernamePasswordParameterBuilder" data-throw-if-not-resolved="True"/>
    description: A builder enabling you to add optional parameters before executing the token request
  parameters:
  - namesWithMoniker:
    - value: scopes
    description: Scopes requested to access a protected API
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: username
    description: >-
      Identifier of the user application requests token on behalf.
                  Generally in UserPrincipalName (UPN) format, e.g. <code data-dev-comment-type="c">john.doe@contoso.com</code>
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: password
    description: User password as a string.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)
  commentId: M:Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)
  name: AcquireTokenByUsernamePassword(IEnumerable<String>, String, String)
  fullName: Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(IEnumerable<String>, String, String)
  nameWithType: IPublicClientApplication.AcquireTokenByUsernamePassword(IEnumerable<String>, String, String)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder AcquireTokenByUsernamePassword (System.Collections.Generic.IEnumerable<string> scopes, string username, string password);
  - lang: fsharp
    values:
    - value: 'abstract member AcquireTokenByUsernamePassword : seq<string> * string * string -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder'
  - lang: vb
    values:
    - value: Public Function AcquireTokenByUsernamePassword (scopes As IEnumerable(Of String), username As String, password As String) As AcquireTokenByUsernamePasswordParameterBuilder
  monikers:
  - msal-dotnet-latest
  summary: >-
    Non-interactive request to acquire a security token from the authority, via Username/Password Authentication.

    Available only on .NET desktop and .NET core. See https://aka.ms/msal-net-up for details.
  remarks: '<p>You can also pass optional parameters by chaining the builder with: <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})"></xref> to pass additional query parameters to the Azure AD, and one of the overrides of <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(System.String,System.Boolean)"></xref> in order to override the default authority set at the application construction. Note that the overriding authority needs to be part of the known authorities added to the application construction.</p>'
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder?alt=Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder&text=AcquireTokenByUsernamePasswordParameterBuilder" data-throw-if-not-resolved="True"/>
    description: A builder enabling you to add optional parameters before executing the token request
  parameters:
  - namesWithMoniker:
    - value: scopes
    description: Scopes requested to access a protected API
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: username
    description: >-
      Identifier of the user application requests token on behalf.
                  Generally in UserPrincipalName (UPN) format, e.g. <code data-dev-comment-type="c">john.doe@contoso.com</code>
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: password
    description: User password as a secure string.
    type: <xref href="System.Security.SecureString?alt=System.Security.SecureString&text=SecureString" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable{System.String},System.String,System.Security.SecureString)
  commentId: M:Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable{System.String},System.String,System.Security.SecureString)
  name: AcquireTokenByUsernamePassword(IEnumerable<String>, String, SecureString)
  fullName: Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(IEnumerable<String>, String, SecureString)
  nameWithType: IPublicClientApplication.AcquireTokenByUsernamePassword(IEnumerable<String>, String, SecureString)
  attributesWithMoniker:
  - value: System.ObsoleteAttribute
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: >-
        [System.Obsolete("Using SecureString is not recommended. Use AcquireTokenByUsernamePassword(IEnumerable<string> scopes, string username, string password) instead.", false)]

        public Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder AcquireTokenByUsernamePassword (System.Collections.Generic.IEnumerable<string> scopes, string username, System.Security.SecureString password);
  - lang: fsharp
    values:
    - value: >-
        [<System.Obsolete("Using SecureString is not recommended. Use AcquireTokenByUsernamePassword(IEnumerable<string> scopes, string username, string password) instead.", false)>]

        abstract member AcquireTokenByUsernamePassword : seq<string> * string * System.Security.SecureString -> Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder
  - lang: vb
    values:
    - value: Public Function AcquireTokenByUsernamePassword (scopes As IEnumerable(Of String), username As String, password As SecureString) As AcquireTokenByUsernamePasswordParameterBuilder
  monikers:
  - msal-dotnet-latest
  obsoleteMessagesWithMoniker:
  - value: Using SecureString is not recommended. Use AcquireTokenByUsernamePassword(IEnumerable&lt;string&gt; scopes, string username, string password) instead.
  summary: >-
    Non-interactive request to acquire a security token from the authority, via Username/Password Authentication.

    Available only on .net desktop and .net core. See https://aka.ms/msal-net-up for details.
  remarks: '<p>You can also pass optional parameters by chaining the builder with: <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})"></xref> to pass additional query parameters to the STS, and one of the overrides of <xref data-throw-if-not-resolved="true" uid="Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(System.String,System.Boolean)"></xref> in order to override the default authority set at the application construction. Note that the overriding authority needs to be part of the known authorities added to the application construction. .NET no longer recommends using SecureString and MSAL puts the plaintext value of the password on the wire, as required by the OAuth protocol. See <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.securestring?view=net-6.0#remarks">SecureString documentation</a>.</p>'
  metadata: {}
uid: Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword*
commentId: Overload:Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword
namespace: Microsoft.Identity.Client
name: AcquireTokenByUsernamePassword
fullName: Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword
nameWithType: IPublicClientApplication.AcquireTokenByUsernamePassword
assembliesWithMoniker:
- value: Microsoft.Identity.Client.dll
packagesWithMoniker:
- value: Microsoft.Identity.Client v4.49.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword
  api_location:
  - Microsoft.Identity.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword
  - Microsoft::Identity::Client::IPublicClientApplication::AcquireTokenByUsernamePassword
  - AcquireTokenByUsernamePassword
  - IPublicClientApplication.AcquireTokenByUsernamePassword
  - IPublicClientApplication::AcquireTokenByUsernamePassword
  helpviewer_keywords:
  - IPublicClientApplication.AcquireTokenByUsernamePassword method [.NET]
  - AcquireTokenByUsernamePassword method [.NET], interface IPublicClientApplication
  - IPublicClientApplication.AcquireTokenByUsernamePassword(IEnumerable<String>, String, String) method [.NET]
  - AcquireTokenByUsernamePassword(IEnumerable<String>, String, String) method [.NET], interface IPublicClientApplication
  - IPublicClientApplication.AcquireTokenByUsernamePassword(IEnumerable<String>, String, SecureString) method [.NET]
  - AcquireTokenByUsernamePassword(IEnumerable<String>, String, SecureString) method [.NET], interface IPublicClientApplication
  monikers:
  - msal-dotnet-latest
