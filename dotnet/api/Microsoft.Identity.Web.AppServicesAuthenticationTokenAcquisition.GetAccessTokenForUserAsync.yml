### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
    description: An access token to call on behalf of the user, the downstream API characterized by its scopes.
  parameters:
  - namesWithMoniker:
    - value: scopes
    description: Scopes to request for the downstream API to call.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: authenticationScheme
    description: >-
      Authentication scheme. If null, will use OpenIdConnectDefault.AuthenticationScheme
                  if called from a web app, and JwtBearerDefault.AuthenticationScheme if called from a web API.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: tenantId
    description: >-
      Enables to override the tenant/account for the same identity. This is useful in the
                  cases where a given account is guest in other tenants, and you want to acquire tokens for a specific tenant.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: userFlow
    description: Azure AD B2C UserFlow to target.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: user
    description: >-
      Optional claims principal representing the user. If not provided, will use the signed-in
                  user (in a web app), or the user for which the token was received (in a web API)
                  cases where a given account is guest in other tenants, and you want to acquire tokens for a specific tenant, like where the user is a guest in.
    type: <xref href="System.Security.Claims.ClaimsPrincipal?alt=System.Security.Claims.ClaimsPrincipal&text=ClaimsPrincipal" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: tokenAcquisitionOptions
    description: Options passed-in to create the token acquisition object which calls into MSAL .NET.
    type: <xref href="Microsoft.Identity.Web.TokenAcquisitionOptions?alt=Microsoft.Identity.Web.TokenAcquisitionOptions&text=TokenAcquisitionOptions" data-throw-if-not-resolved="True"/>
  implementsWithMoniker:
  - value: <xref href="Microsoft.Identity.Web.ITokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.Identity.Web.TokenAcquisitionOptions)?alt=Microsoft.Identity.Web.ITokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.Identity.Web.TokenAcquisitionOptions)&text=GetAccessTokenForUserAsync(IEnumerable%3CString%3E%2C+String%2C+String%2C+String%2C+ClaimsPrincipal%2C+TokenAcquisitionOptions)" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.Identity.Web.TokenAcquisitionOptions)
  commentId: M:Microsoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.Identity.Web.TokenAcquisitionOptions)
  name: GetAccessTokenForUserAsync(IEnumerable<String>, String, String, String, ClaimsPrincipal, TokenAcquisitionOptions)
  fullName: Microsoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.GetAccessTokenForUserAsync(IEnumerable<String>, String, String, String, ClaimsPrincipal, TokenAcquisitionOptions)
  nameWithType: AppServicesAuthenticationTokenAcquisition.GetAccessTokenForUserAsync(IEnumerable<String>, String, String, String, ClaimsPrincipal, TokenAcquisitionOptions)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public System.Threading.Tasks.Task<string> GetAccessTokenForUserAsync (System.Collections.Generic.IEnumerable<string> scopes, string? authenticationScheme = default, string? tenantId = default, string? userFlow = default, System.Security.Claims.ClaimsPrincipal? user = default, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member GetAccessTokenForUserAsync : seq<string> * string * string * string * System.Security.Claims.ClaimsPrincipal * Microsoft.Identity.Web.TokenAcquisitionOptions -> System.Threading.Tasks.Task<string>

        override this.GetAccessTokenForUserAsync : seq<string> * string * string * string * System.Security.Claims.ClaimsPrincipal * Microsoft.Identity.Web.TokenAcquisitionOptions -> System.Threading.Tasks.Task<string>
  - lang: vb
    values:
    - value: Public Function GetAccessTokenForUserAsync (scopes As IEnumerable(Of String), Optional authenticationScheme As String = Nothing, Optional tenantId As String = Nothing, Optional userFlow As String = Nothing, Optional user As ClaimsPrincipal = Nothing, Optional tokenAcquisitionOptions As TokenAcquisitionOptions = Nothing) As Task(Of String)
  monikers:
  - msal-model-dotnet-latest
  summary: >-
    Typically used from an ASP.NET Core web app or web API controller. This method gets an access token

    for a downstream API on behalf of the user account for which the claims are provided in the <xref data-throw-if-not-resolved="true" uid="Microsoft.AspNetCore.Http.HttpContext.User"></xref>

    member of the controller's <xref data-throw-if-not-resolved="true" uid="Microsoft.AspNetCore.Http.HttpContext"></xref> parameter.
  metadata: {}
uid: Microsoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.GetAccessTokenForUserAsync*
commentId: Overload:Microsoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.GetAccessTokenForUserAsync
namespace: Microsoft.Identity.Web
name: GetAccessTokenForUserAsync
fullName: Microsoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.GetAccessTokenForUserAsync
nameWithType: AppServicesAuthenticationTokenAcquisition.GetAccessTokenForUserAsync
assembliesWithMoniker:
- value: Microsoft.Identity.Web.dll
packagesWithMoniker:
- value: Microsoft.Identity.Web v1.25.10
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-model-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.GetAccessTokenForUserAsync
  api_location:
  - Microsoft.Identity.Web.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.GetAccessTokenForUserAsync
  - Microsoft::Identity::Web::AppServicesAuthenticationTokenAcquisition::GetAccessTokenForUserAsync
  - GetAccessTokenForUserAsync
  - AppServicesAuthenticationTokenAcquisition.GetAccessTokenForUserAsync
  - AppServicesAuthenticationTokenAcquisition::GetAccessTokenForUserAsync
  helpviewer_keywords:
  - AppServicesAuthenticationTokenAcquisition.GetAccessTokenForUserAsync method [.NET]
  - GetAccessTokenForUserAsync method [.NET], class AppServicesAuthenticationTokenAcquisition
  - AppServicesAuthenticationTokenAcquisition.GetAccessTokenForUserAsync(IEnumerable<String>, String, String, String, ClaimsPrincipal, TokenAcquisitionOptions) method [.NET]
  - GetAccessTokenForUserAsync(IEnumerable<String>, String, String, String, ClaimsPrincipal, TokenAcquisitionOptions) method [.NET], class AppServicesAuthenticationTokenAcquisition
  monikers:
  - msal-model-dotnet-latest
