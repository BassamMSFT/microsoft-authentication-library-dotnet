### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Uri?alt=System.Uri&text=Uri" data-throw-if-not-resolved="True"/>&gt;
    description: URL of the authorize endpoint including the query parameters.
  parameters:
  - namesWithMoniker:
    - value: scopes
    description: Scopes requested to access a protected API
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: loginHint
    description: Identifier of the user. Generally a UPN. This can be empty
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: extraQueryParameters
    description: >-
      This parameter will be appended as is to the query string in the HTTP authentication request to the authority.
                  This is expected to be a string of segments of the form <code data-dev-comment-type="c">key=value</code> separated by an ampersand character.
                  The parameter can be null.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  implementsWithMoniker:
  - value: <xref href="Microsoft.Identity.Client.IConfidentialClientApplication.GetAuthorizationRequestUrlAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)?alt=Microsoft.Identity.Client.IConfidentialClientApplication.GetAuthorizationRequestUrlAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)&text=GetAuthorizationRequestUrlAsync(IEnumerable%3CString%3E%2C+String%2C+String)" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrlAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)
  commentId: M:Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrlAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)
  name: GetAuthorizationRequestUrlAsync(IEnumerable<String>, String, String)
  fullName: Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrlAsync(IEnumerable<String>, String, String)
  nameWithType: ConfidentialClientApplication.GetAuthorizationRequestUrlAsync(IEnumerable<String>, String, String)
  attributesWithMoniker:
  - value: System.ObsoleteAttribute
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: >-
        [System.Obsolete("Use GetAuthorizationRequestUrl instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)]

        public System.Threading.Tasks.Task<Uri> GetAuthorizationRequestUrlAsync (System.Collections.Generic.IEnumerable<string> scopes, string loginHint, string extraQueryParameters);
  - lang: fsharp
    values:
    - value: >-
        [<System.Obsolete("Use GetAuthorizationRequestUrl instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)>]

        abstract member GetAuthorizationRequestUrlAsync : seq<string> * string * string -> System.Threading.Tasks.Task<Uri>

        override this.GetAuthorizationRequestUrlAsync : seq<string> * string * string -> System.Threading.Tasks.Task<Uri>
  - lang: vb
    values:
    - value: Public Function GetAuthorizationRequestUrlAsync (scopes As IEnumerable(Of String), loginHint As String, extraQueryParameters As String) As Task(Of Uri)
  monikers:
  - msal-dotnet-latest
  seeAlso: >+
    - <xref:Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrl(System.Collections.Generic.IEnumerable%7bSystem.String%7d)>

  obsoleteMessagesWithMoniker:
  - value: 'Use GetAuthorizationRequestUrl instead. See https://aka.ms/msal-net-3-breaking-changes. '
  summary: >-
    [V2 API] Computes the URL of the authorization request letting the user sign-in and consent to the application accessing specific scopes in

    the user's name. The URL targets the /authorize endpoint of the authority configured in the application.

    This override enables you to specify a login hint and extra query parameter.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Uri?alt=System.Uri&text=Uri" data-throw-if-not-resolved="True"/>&gt;
    description: URL of the authorize endpoint including the query parameters.
  parameters:
  - namesWithMoniker:
    - value: scopes
    description: Scopes requested to access a protected API (a resource)
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: redirectUri
    description: Address to return to upon receiving a response from the authority.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: loginHint
    description: Identifier of the user. Generally a UPN.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: extraQueryParameters
    description: >-
      This parameter will be appended as is to the query string in the HTTP authentication request to the authority.
                  This is expected to be a string of segments of the form <code data-dev-comment-type="c">key=value</code> separated by an ampersand character.
                  The parameter can be null.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: extraScopesToConsent
    description: >-
      Scopes for additional resources (other than the resource for which <code data-dev-comment-type="paramref">scopes</code> are requested),
                  which a developer can request the user to consent to upfront.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: authority
    description: Specific authority for which the token is requested. Passing a different value than configured does not change the configured value
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  implementsWithMoniker:
  - value: <xref href="Microsoft.Identity.Client.IConfidentialClientApplication.GetAuthorizationRequestUrlAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)?alt=Microsoft.Identity.Client.IConfidentialClientApplication.GetAuthorizationRequestUrlAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)&text=GetAuthorizationRequestUrlAsync(IEnumerable%3CString%3E%2C+String%2C+String%2C+String%2C+IEnumerable%3CString%3E%2C+String)" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrlAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)
  commentId: M:Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrlAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)
  name: GetAuthorizationRequestUrlAsync(IEnumerable<String>, String, String, String, IEnumerable<String>, String)
  fullName: Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrlAsync(IEnumerable<String>, String, String, String, IEnumerable<String>, String)
  nameWithType: ConfidentialClientApplication.GetAuthorizationRequestUrlAsync(IEnumerable<String>, String, String, String, IEnumerable<String>, String)
  attributesWithMoniker:
  - value: System.ObsoleteAttribute
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: >-
        [System.Obsolete("Use GetAuthorizationRequestUrl instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)]

        public System.Threading.Tasks.Task<Uri> GetAuthorizationRequestUrlAsync (System.Collections.Generic.IEnumerable<string> scopes, string redirectUri, string loginHint, string extraQueryParameters, System.Collections.Generic.IEnumerable<string> extraScopesToConsent, string authority);
  - lang: fsharp
    values:
    - value: >-
        [<System.Obsolete("Use GetAuthorizationRequestUrl instead. See https://aka.ms/msal-net-3-breaking-changes. ", true)>]

        abstract member GetAuthorizationRequestUrlAsync : seq<string> * string * string * string * seq<string> * string -> System.Threading.Tasks.Task<Uri>

        override this.GetAuthorizationRequestUrlAsync : seq<string> * string * string * string * seq<string> * string -> System.Threading.Tasks.Task<Uri>
  - lang: vb
    values:
    - value: Public Function GetAuthorizationRequestUrlAsync (scopes As IEnumerable(Of String), redirectUri As String, loginHint As String, extraQueryParameters As String, extraScopesToConsent As IEnumerable(Of String), authority As String) As Task(Of Uri)
  monikers:
  - msal-dotnet-latest
  seeAlso: >+
    - <xref:Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrl(System.Collections.Generic.IEnumerable%7bSystem.String%7d)>

  obsoleteMessagesWithMoniker:
  - value: 'Use GetAuthorizationRequestUrl instead. See https://aka.ms/msal-net-3-breaking-changes. '
  summary: >-
    [V2 API] Computes the URL of the authorization request letting the user sign-in and consent to the application accessing specific scopes in

    the user's name. The URL targets the /authorize endpoint of the authority specified as the <code data-dev-comment-type="paramref">authority</code> parameter.

    This override enables you to specify a redirectUri, login hint extra query parameters, extra scope to consent (which are not for the

    same resource as the <code data-dev-comment-type="paramref">scopes</code>), and an authority.
  metadata: {}
uid: Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrlAsync*
commentId: Overload:Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrlAsync
namespace: Microsoft.Identity.Client
name: GetAuthorizationRequestUrlAsync
fullName: Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrlAsync
nameWithType: ConfidentialClientApplication.GetAuthorizationRequestUrlAsync
assembliesWithMoniker:
- value: Microsoft.Identity.Client.dll
packagesWithMoniker:
- value: Microsoft.Identity.Client v4.49.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-dotnet-latest
metadata:
  api_name:
  - Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrlAsync
  api_location:
  - Microsoft.Identity.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrlAsync
  - Microsoft::Identity::Client::ConfidentialClientApplication::GetAuthorizationRequestUrlAsync
  - GetAuthorizationRequestUrlAsync
  - ConfidentialClientApplication.GetAuthorizationRequestUrlAsync
  - ConfidentialClientApplication::GetAuthorizationRequestUrlAsync
  helpviewer_keywords:
  - ConfidentialClientApplication.GetAuthorizationRequestUrlAsync method [.NET]
  - GetAuthorizationRequestUrlAsync method [.NET], class ConfidentialClientApplication
  - ConfidentialClientApplication.GetAuthorizationRequestUrlAsync(IEnumerable<String>, String, String) method [.NET]
  - GetAuthorizationRequestUrlAsync(IEnumerable<String>, String, String) method [.NET], class ConfidentialClientApplication
  - ConfidentialClientApplication.GetAuthorizationRequestUrlAsync(IEnumerable<String>, String, String, String, IEnumerable<String>, String) method [.NET]
  - GetAuthorizationRequestUrlAsync(IEnumerable<String>, String, String, String, IEnumerable<String>, String) method [.NET], class ConfidentialClientApplication
  monikers:
  - msal-dotnet-latest
