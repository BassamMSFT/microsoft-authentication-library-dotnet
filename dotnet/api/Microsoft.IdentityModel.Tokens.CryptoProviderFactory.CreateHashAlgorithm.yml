### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Security.Cryptography.HashAlgorithm?alt=System.Security.Cryptography.HashAlgorithm&text=HashAlgorithm" data-throw-if-not-resolved="True"/>
    description: A <xref data-throw-if-not-resolved="true" uid="System.Security.Cryptography.HashAlgorithm"></xref>.
  parameters:
  - namesWithMoniker:
    - value: algorithm
    description: the name of the hash algorithm to create.
    type: <xref href="System.Security.Cryptography.HashAlgorithmName?alt=System.Security.Cryptography.HashAlgorithmName&text=HashAlgorithmName" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: thrown if <code data-dev-comment-type="paramref">algorithm</code> is null or empty.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: thrown if <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])"></xref> returns a type that is not assignable from <xref data-throw-if-not-resolved="true" uid="System.Security.Cryptography.HashAlgorithm"></xref>.
    type: <xref href="System.InvalidOperationException" data-throw-if-not-resolved="True"/>
  - description: thrown if <code data-dev-comment-type="paramref">algorithm</code> is not supported.
    type: <xref href="System.NotSupportedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm(System.Security.Cryptography.HashAlgorithmName)
  commentId: M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm(System.Security.Cryptography.HashAlgorithmName)
  name: CreateHashAlgorithm(HashAlgorithmName)
  fullName: Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm(HashAlgorithmName)
  nameWithType: CryptoProviderFactory.CreateHashAlgorithm(HashAlgorithmName)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Security.Cryptography.HashAlgorithm CreateHashAlgorithm (System.Security.Cryptography.HashAlgorithmName algorithm);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateHashAlgorithm : System.Security.Cryptography.HashAlgorithmName -> System.Security.Cryptography.HashAlgorithm

        override this.CreateHashAlgorithm : System.Security.Cryptography.HashAlgorithmName -> System.Security.Cryptography.HashAlgorithm
  - lang: vb
    values:
    - value: Public Overridable Function CreateHashAlgorithm (algorithm As HashAlgorithmName) As HashAlgorithm
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a <xref data-throw-if-not-resolved="true" uid="System.Security.Cryptography.HashAlgorithm"></xref> for a specific algorithm.
  remarks: <p>When finished with the <xref data-throw-if-not-resolved="true" uid="System.Security.Cryptography.HashAlgorithm"></xref> call <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseHashAlgorithm(System.Security.Cryptography.HashAlgorithm)"></xref>.</p><p>If <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider"></xref> is set and <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])"></xref> returns true. <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])"></xref> is called to obtain the <xref data-throw-if-not-resolved="true" uid="System.Security.Cryptography.HashAlgorithm"></xref>.</p>
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Security.Cryptography.HashAlgorithm?alt=System.Security.Cryptography.HashAlgorithm&text=HashAlgorithm" data-throw-if-not-resolved="True"/>
    description: A <xref data-throw-if-not-resolved="true" uid="System.Security.Cryptography.HashAlgorithm"></xref>.
  parameters:
  - namesWithMoniker:
    - value: algorithm
    description: the name of the hash algorithm to create.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: thrown if <code data-dev-comment-type="paramref">algorithm</code> is null or empty.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: thrown if <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])"></xref> returns a type that is not assignable from <xref data-throw-if-not-resolved="true" uid="System.Security.Cryptography.HashAlgorithm"></xref>.
    type: <xref href="System.InvalidOperationException" data-throw-if-not-resolved="True"/>
  - description: thrown if <code data-dev-comment-type="paramref">algorithm</code> is not supported.
    type: <xref href="System.NotSupportedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm(System.String)
  commentId: M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm(System.String)
  name: CreateHashAlgorithm(String)
  fullName: Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm(String)
  nameWithType: CryptoProviderFactory.CreateHashAlgorithm(String)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Security.Cryptography.HashAlgorithm CreateHashAlgorithm (string algorithm);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateHashAlgorithm : string -> System.Security.Cryptography.HashAlgorithm

        override this.CreateHashAlgorithm : string -> System.Security.Cryptography.HashAlgorithm
  - lang: vb
    values:
    - value: Public Overridable Function CreateHashAlgorithm (algorithm As String) As HashAlgorithm
  monikers:
  - msal-web-dotnet-latest
  summary: Creates a <xref data-throw-if-not-resolved="true" uid="System.Security.Cryptography.HashAlgorithm"></xref> for a specific algorithm.
  remarks: <p>When finished with the <xref data-throw-if-not-resolved="true" uid="System.Security.Cryptography.HashAlgorithm"></xref> call <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseHashAlgorithm(System.Security.Cryptography.HashAlgorithm)"></xref>.</p><p>If <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider"></xref> is set and <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])"></xref> returns true. <xref data-throw-if-not-resolved="true" uid="Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])"></xref> is called to obtain the <xref data-throw-if-not-resolved="true" uid="System.Security.Cryptography.HashAlgorithm"></xref>.</p>
  metadata: {}
uid: Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm*
commentId: Overload:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm
namespace: Microsoft.IdentityModel.Tokens
name: CreateHashAlgorithm
fullName: Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm
nameWithType: CryptoProviderFactory.CreateHashAlgorithm
assembliesWithMoniker:
- value: Microsoft.IdentityModel.Tokens.dll
packagesWithMoniker:
- value: Microsoft.IdentityModel.Tokens v6.25.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- msal-web-dotnet-latest
metadata:
  api_name:
  - Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm
  api_location:
  - Microsoft.IdentityModel.Tokens.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm
  - Microsoft::IdentityModel::Tokens::CryptoProviderFactory::CreateHashAlgorithm
  - CreateHashAlgorithm
  - CryptoProviderFactory.CreateHashAlgorithm
  - CryptoProviderFactory::CreateHashAlgorithm
  helpviewer_keywords:
  - CryptoProviderFactory.CreateHashAlgorithm method [.NET]
  - CreateHashAlgorithm method [.NET], class CryptoProviderFactory
  - CryptoProviderFactory.CreateHashAlgorithm(HashAlgorithmName) method [.NET]
  - CreateHashAlgorithm(HashAlgorithmName) method [.NET], class CryptoProviderFactory
  - CryptoProviderFactory.CreateHashAlgorithm(String) method [.NET]
  - CreateHashAlgorithm(String) method [.NET], class CryptoProviderFactory
  monikers:
  - msal-web-dotnet-latest
